/*
 * Arm SCP/MCP Software
 * Copyright (c) 2020, Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Description:
 *     This header describes the data structures used in flash images with the
 *     signature 0xAA640001 generated by the ARM fiptool.
 *
 *     The structures are based on data from
 *     https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git, commit
 *     cfb3f73344217aa000aaff9d84baad7527af75bf.
 *
 *     The byte structure and alignment of the structures in this header
 *     represent the structures of the FIP stored on flash memories.
 *     This will in general never change unless the signature is also changed.
 *     NOTE that these data structures may also be used by ROM code.
 */

#ifndef MOD_N1SDP_FLASH_FIP_H
#define MOD_N1SDP_FLASH_FIP_H

#include <fwk_align.h>
#include <fwk_assert.h>

#include <stdbool.h>
#include <stdint.h>

#define FIP_TOC_SIGNATURE UINT32_C(0xAA640001)

#define FIPL_ENTRY_SCP_BL2 \
    { .u = { 0x97, 0x66, 0xfd, 0x3d, 0x89, 0xbe, 0xe8, 0x49, \
             0xae, 0x5d, 0x78, 0xa1, 0x40, 0x60, 0x82, 0x13 } }

#define FIP_ENTRY_TF_BL31 \
    { .u = { 0x47, 0xd4, 0x08, 0x6d, 0x4c, 0xfe, 0x98, 0x46, \
             0x9b, 0x95, 0x29, 0x50, 0xcb, 0xbd, 0x5a, 0x00 } }

#define FIP_ENTRY_NULL \
    { .u = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }

struct __attribute__((packed)) fip_uuid {
    uint8_t u[16];
};

struct __attribute__((packed)) fip_entry {
    struct fip_uuid uuid;
    uint64_t offset_address;
    uint64_t size;
    uint64_t flags;
};

struct __attribute__((packed)) fip_toc {
    uint32_t signature;
    uint32_t serial_number;
    uint64_t flags;
    struct fip_entry entry[];
};

/* these data structues describe the layout of binary generated by fiptool */
static_assert(alignof(struct fip_uuid) == 1, "bad structure alignment");
static_assert(sizeof(struct fip_uuid)  == 16, "bad structure size");

static_assert(alignof(struct fip_entry) == 1, "bad structure alignment");
static_assert(sizeof(struct fip_entry)  == 40, "bad structure size");

static_assert(alignof(struct fip_toc) == 1, "bad structure alignment");
static_assert(sizeof(struct fip_toc)  == 16, "bad structure size");

#endif // MOD_N1SDP_FLASH_FIP_H
