/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKFWK_MM_H
#define _MOCKFWK_MM_H

#include "unity.h"
#include "fwk_mm.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockfwk_mm_Init(void);
void Mockfwk_mm_Destroy(void);
void Mockfwk_mm_Verify(void);




#define fwk_mm_alloc_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_alloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_alloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_alloc_ExpectAndReturn(num, size, cmock_retval) fwk_mm_alloc_CMockExpectAndReturn(__LINE__, num, size, cmock_retval)
void fwk_mm_alloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_alloc_notrap_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_alloc_notrap_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_alloc_notrap_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_alloc_notrap_ExpectAndReturn(num, size, cmock_retval) fwk_mm_alloc_notrap_CMockExpectAndReturn(__LINE__, num, size, cmock_retval)
void fwk_mm_alloc_notrap_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_alloc_aligned_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_alloc_aligned_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_alloc_aligned_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_alloc_aligned_ExpectAndReturn(alignment, num, size, cmock_retval) fwk_mm_alloc_aligned_CMockExpectAndReturn(__LINE__, alignment, num, size, cmock_retval)
void fwk_mm_alloc_aligned_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t alignment, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_calloc_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_calloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_calloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_calloc_ExpectAndReturn(num, size, cmock_retval) fwk_mm_calloc_CMockExpectAndReturn(__LINE__, num, size, cmock_retval)
void fwk_mm_calloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_calloc_aligned_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_calloc_aligned_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_calloc_aligned_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_calloc_aligned_ExpectAndReturn(alignment, num, size, cmock_retval) fwk_mm_calloc_aligned_CMockExpectAndReturn(__LINE__, alignment, num, size, cmock_retval)
void fwk_mm_calloc_aligned_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t alignment, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_realloc_ExpectAnyArgsAndReturn(cmock_retval) fwk_mm_realloc_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fwk_mm_realloc_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define fwk_mm_realloc_ExpectAndReturn(ptr, num, size, cmock_retval) fwk_mm_realloc_CMockExpectAndReturn(__LINE__, ptr, num, size, cmock_retval)
void fwk_mm_realloc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* ptr, size_t num, size_t size, void* cmock_to_return);
#define fwk_mm_free_ExpectAnyArgs() fwk_mm_free_CMockExpectAnyArgs(__LINE__)
void fwk_mm_free_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define fwk_mm_free_Expect(ptr) fwk_mm_free_CMockExpect(__LINE__, ptr)
void fwk_mm_free_CMockExpect(UNITY_LINE_TYPE cmock_line, void* ptr);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
