/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_PPU_V1_EXTRA_H
#define _MOCKMOD_PPU_V1_EXTRA_H

#include "unity.h"
#include "mod_ppu_v1_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_ppu_v1_extra_Init(void);
void Mockmod_ppu_v1_extra_Destroy(void);
void Mockmod_ppu_v1_extra_Verify(void);


typedef void(*cmock_mod_ppu_v1_extra_func_ptr1)(uintptr_t param);


#define start_alarm_api_IgnoreAndReturn(cmock_retval) start_alarm_api_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_StopIgnore() start_alarm_api_CMockStopIgnore()
void start_alarm_api_CMockStopIgnore(void);
#define start_alarm_api_ExpectAnyArgsAndReturn(cmock_retval) start_alarm_api_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void start_alarm_api_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define start_alarm_api_ExpectAndReturn(alarm_id, milliseconds, type, callback, param, cmock_retval) start_alarm_api_CMockExpectAndReturn(__LINE__, alarm_id, milliseconds, type, callback, param, cmock_retval)
void start_alarm_api_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t alarm_id, unsigned int milliseconds, enum mod_timer_alarm_type type, cmock_mod_ppu_v1_extra_func_ptr1 callback, uintptr_t param, int cmock_to_return);
typedef int (* CMOCK_start_alarm_api_CALLBACK)(fwk_id_t alarm_id, unsigned int milliseconds, enum mod_timer_alarm_type type, cmock_mod_ppu_v1_extra_func_ptr1 callback, uintptr_t param, int cmock_num_calls);
void start_alarm_api_AddCallback(CMOCK_start_alarm_api_CALLBACK Callback);
void start_alarm_api_Stub(CMOCK_start_alarm_api_CALLBACK Callback);
#define start_alarm_api_StubWithCallback start_alarm_api_Stub
#define start_alarm_api_IgnoreArg_alarm_id() start_alarm_api_CMockIgnoreArg_alarm_id(__LINE__)
void start_alarm_api_CMockIgnoreArg_alarm_id(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_milliseconds() start_alarm_api_CMockIgnoreArg_milliseconds(__LINE__)
void start_alarm_api_CMockIgnoreArg_milliseconds(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_type() start_alarm_api_CMockIgnoreArg_type(__LINE__)
void start_alarm_api_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_callback() start_alarm_api_CMockIgnoreArg_callback(__LINE__)
void start_alarm_api_CMockIgnoreArg_callback(UNITY_LINE_TYPE cmock_line);
#define start_alarm_api_IgnoreArg_param() start_alarm_api_CMockIgnoreArg_param(__LINE__)
void start_alarm_api_CMockIgnoreArg_param(UNITY_LINE_TYPE cmock_line);
#define stop_alarm_api_IgnoreAndReturn(cmock_retval) stop_alarm_api_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stop_alarm_api_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define stop_alarm_api_StopIgnore() stop_alarm_api_CMockStopIgnore()
void stop_alarm_api_CMockStopIgnore(void);
#define stop_alarm_api_ExpectAnyArgsAndReturn(cmock_retval) stop_alarm_api_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void stop_alarm_api_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define stop_alarm_api_ExpectAndReturn(alarm_id, cmock_retval) stop_alarm_api_CMockExpectAndReturn(__LINE__, alarm_id, cmock_retval)
void stop_alarm_api_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t alarm_id, int cmock_to_return);
typedef int (* CMOCK_stop_alarm_api_CALLBACK)(fwk_id_t alarm_id, int cmock_num_calls);
void stop_alarm_api_AddCallback(CMOCK_stop_alarm_api_CALLBACK Callback);
void stop_alarm_api_Stub(CMOCK_stop_alarm_api_CALLBACK Callback);
#define stop_alarm_api_StubWithCallback stop_alarm_api_Stub
#define stop_alarm_api_IgnoreArg_alarm_id() stop_alarm_api_CMockIgnoreArg_alarm_id(__LINE__)
void stop_alarm_api_CMockIgnoreArg_alarm_id(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_init_Ignore() ppu_v1_init_CMockIgnore()
void ppu_v1_init_CMockIgnore(void);
#define ppu_v1_init_StopIgnore() ppu_v1_init_CMockStopIgnore()
void ppu_v1_init_CMockStopIgnore(void);
#define ppu_v1_init_ExpectAnyArgs() ppu_v1_init_CMockExpectAnyArgs(__LINE__)
void ppu_v1_init_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_init_Expect(ppu) ppu_v1_init_CMockExpect(__LINE__, ppu)
void ppu_v1_init_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_init_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_init_AddCallback(CMOCK_ppu_v1_init_CALLBACK Callback);
void ppu_v1_init_Stub(CMOCK_ppu_v1_init_CALLBACK Callback);
#define ppu_v1_init_StubWithCallback ppu_v1_init_Stub
#define ppu_v1_init_ExpectWithArray(ppu, ppu_Depth) ppu_v1_init_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_init_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_init_ReturnThruPtr_ppu(ppu) ppu_v1_init_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_init_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_init_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_init_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_init_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_init_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_init_IgnoreArg_ppu() ppu_v1_init_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_init_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_power_mode_IgnoreAndReturn(cmock_retval) ppu_v1_set_power_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_set_power_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_set_power_mode_StopIgnore() ppu_v1_set_power_mode_CMockStopIgnore()
void ppu_v1_set_power_mode_CMockStopIgnore(void);
#define ppu_v1_set_power_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_set_power_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_set_power_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_set_power_mode_ExpectAndReturn(ppu, ppu_mode, timer_ctx, cmock_retval) ppu_v1_set_power_mode_CMockExpectAndReturn(__LINE__, ppu, ppu_mode, timer_ctx, cmock_retval)
void ppu_v1_set_power_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, struct ppu_v1_timer_ctx* timer_ctx, int cmock_to_return);
typedef int (* CMOCK_ppu_v1_set_power_mode_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, struct ppu_v1_timer_ctx* timer_ctx, int cmock_num_calls);
void ppu_v1_set_power_mode_AddCallback(CMOCK_ppu_v1_set_power_mode_CALLBACK Callback);
void ppu_v1_set_power_mode_Stub(CMOCK_ppu_v1_set_power_mode_CALLBACK Callback);
#define ppu_v1_set_power_mode_StubWithCallback ppu_v1_set_power_mode_Stub
#define ppu_v1_set_power_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, ppu_mode, timer_ctx, timer_ctx_Depth, cmock_retval) ppu_v1_set_power_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, ppu_mode, timer_ctx, timer_ctx_Depth, cmock_retval)
void ppu_v1_set_power_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, struct ppu_v1_timer_ctx* timer_ctx, int timer_ctx_Depth, int cmock_to_return);
#define ppu_v1_set_power_mode_ReturnThruPtr_ppu(ppu) ppu_v1_set_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_set_power_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_set_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_set_power_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_set_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_set_power_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_set_power_mode_ReturnThruPtr_timer_ctx(timer_ctx) ppu_v1_set_power_mode_CMockReturnMemThruPtr_timer_ctx(__LINE__, timer_ctx, sizeof(struct ppu_v1_timer_ctx))
#define ppu_v1_set_power_mode_ReturnArrayThruPtr_timer_ctx(timer_ctx, cmock_len) ppu_v1_set_power_mode_CMockReturnMemThruPtr_timer_ctx(__LINE__, timer_ctx, cmock_len * sizeof(*timer_ctx))
#define ppu_v1_set_power_mode_ReturnMemThruPtr_timer_ctx(timer_ctx, cmock_size) ppu_v1_set_power_mode_CMockReturnMemThruPtr_timer_ctx(__LINE__, timer_ctx, cmock_size)
void ppu_v1_set_power_mode_CMockReturnMemThruPtr_timer_ctx(UNITY_LINE_TYPE cmock_line, struct ppu_v1_timer_ctx* timer_ctx, size_t cmock_size);
#define ppu_v1_set_power_mode_IgnoreArg_ppu() ppu_v1_set_power_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_set_power_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_power_mode_IgnoreArg_ppu_mode() ppu_v1_set_power_mode_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_set_power_mode_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_power_mode_IgnoreArg_timer_ctx() ppu_v1_set_power_mode_CMockIgnoreArg_timer_ctx(__LINE__)
void ppu_v1_set_power_mode_CMockIgnoreArg_timer_ctx(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_request_power_mode_IgnoreAndReturn(cmock_retval) ppu_v1_request_power_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_request_power_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_request_power_mode_StopIgnore() ppu_v1_request_power_mode_CMockStopIgnore()
void ppu_v1_request_power_mode_CMockStopIgnore(void);
#define ppu_v1_request_power_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_request_power_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_request_power_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_request_power_mode_ExpectAndReturn(ppu, ppu_mode, cmock_retval) ppu_v1_request_power_mode_CMockExpectAndReturn(__LINE__, ppu, ppu_mode, cmock_retval)
void ppu_v1_request_power_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_to_return);
typedef int (* CMOCK_ppu_v1_request_power_mode_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_num_calls);
void ppu_v1_request_power_mode_AddCallback(CMOCK_ppu_v1_request_power_mode_CALLBACK Callback);
void ppu_v1_request_power_mode_Stub(CMOCK_ppu_v1_request_power_mode_CALLBACK Callback);
#define ppu_v1_request_power_mode_StubWithCallback ppu_v1_request_power_mode_Stub
#define ppu_v1_request_power_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, ppu_mode, cmock_retval) ppu_v1_request_power_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, ppu_mode, cmock_retval)
void ppu_v1_request_power_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, int cmock_to_return);
#define ppu_v1_request_power_mode_ReturnThruPtr_ppu(ppu) ppu_v1_request_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_request_power_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_request_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_request_power_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_request_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_request_power_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_request_power_mode_IgnoreArg_ppu() ppu_v1_request_power_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_request_power_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_request_power_mode_IgnoreArg_ppu_mode() ppu_v1_request_power_mode_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_request_power_mode_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_request_operating_mode_IgnoreAndReturn(cmock_retval) ppu_v1_request_operating_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_request_operating_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_request_operating_mode_StopIgnore() ppu_v1_request_operating_mode_CMockStopIgnore()
void ppu_v1_request_operating_mode_CMockStopIgnore(void);
#define ppu_v1_request_operating_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_request_operating_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_request_operating_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ppu_v1_request_operating_mode_ExpectAndReturn(ppu, op_mode, cmock_retval) ppu_v1_request_operating_mode_CMockExpectAndReturn(__LINE__, ppu, op_mode, cmock_retval)
void ppu_v1_request_operating_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_opmode op_mode, int cmock_to_return);
typedef int (* CMOCK_ppu_v1_request_operating_mode_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_opmode op_mode, int cmock_num_calls);
void ppu_v1_request_operating_mode_AddCallback(CMOCK_ppu_v1_request_operating_mode_CALLBACK Callback);
void ppu_v1_request_operating_mode_Stub(CMOCK_ppu_v1_request_operating_mode_CALLBACK Callback);
#define ppu_v1_request_operating_mode_StubWithCallback ppu_v1_request_operating_mode_Stub
#define ppu_v1_request_operating_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, op_mode, cmock_retval) ppu_v1_request_operating_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, op_mode, cmock_retval)
void ppu_v1_request_operating_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_opmode op_mode, int cmock_to_return);
#define ppu_v1_request_operating_mode_ReturnThruPtr_ppu(ppu) ppu_v1_request_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_request_operating_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_request_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_request_operating_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_request_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_request_operating_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_request_operating_mode_IgnoreArg_ppu() ppu_v1_request_operating_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_request_operating_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_request_operating_mode_IgnoreArg_op_mode() ppu_v1_request_operating_mode_CMockIgnoreArg_op_mode(__LINE__)
void ppu_v1_request_operating_mode_CMockIgnoreArg_op_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_opmode_dynamic_enable_Ignore() ppu_v1_opmode_dynamic_enable_CMockIgnore()
void ppu_v1_opmode_dynamic_enable_CMockIgnore(void);
#define ppu_v1_opmode_dynamic_enable_StopIgnore() ppu_v1_opmode_dynamic_enable_CMockStopIgnore()
void ppu_v1_opmode_dynamic_enable_CMockStopIgnore(void);
#define ppu_v1_opmode_dynamic_enable_ExpectAnyArgs() ppu_v1_opmode_dynamic_enable_CMockExpectAnyArgs(__LINE__)
void ppu_v1_opmode_dynamic_enable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_opmode_dynamic_enable_Expect(ppu, min_dyn_mode) ppu_v1_opmode_dynamic_enable_CMockExpect(__LINE__, ppu, min_dyn_mode)
void ppu_v1_opmode_dynamic_enable_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_opmode min_dyn_mode);
typedef void (* CMOCK_ppu_v1_opmode_dynamic_enable_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_opmode min_dyn_mode, int cmock_num_calls);
void ppu_v1_opmode_dynamic_enable_AddCallback(CMOCK_ppu_v1_opmode_dynamic_enable_CALLBACK Callback);
void ppu_v1_opmode_dynamic_enable_Stub(CMOCK_ppu_v1_opmode_dynamic_enable_CALLBACK Callback);
#define ppu_v1_opmode_dynamic_enable_StubWithCallback ppu_v1_opmode_dynamic_enable_Stub
#define ppu_v1_opmode_dynamic_enable_ExpectWithArray(ppu, ppu_Depth, min_dyn_mode) ppu_v1_opmode_dynamic_enable_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, min_dyn_mode)
void ppu_v1_opmode_dynamic_enable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_opmode min_dyn_mode);
#define ppu_v1_opmode_dynamic_enable_ReturnThruPtr_ppu(ppu) ppu_v1_opmode_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_opmode_dynamic_enable_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_opmode_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_opmode_dynamic_enable_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_opmode_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_opmode_dynamic_enable_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_opmode_dynamic_enable_IgnoreArg_ppu() ppu_v1_opmode_dynamic_enable_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_opmode_dynamic_enable_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_opmode_dynamic_enable_IgnoreArg_min_dyn_mode() ppu_v1_opmode_dynamic_enable_CMockIgnoreArg_min_dyn_mode(__LINE__)
void ppu_v1_opmode_dynamic_enable_CMockIgnoreArg_min_dyn_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_dynamic_enable_Ignore() ppu_v1_dynamic_enable_CMockIgnore()
void ppu_v1_dynamic_enable_CMockIgnore(void);
#define ppu_v1_dynamic_enable_StopIgnore() ppu_v1_dynamic_enable_CMockStopIgnore()
void ppu_v1_dynamic_enable_CMockStopIgnore(void);
#define ppu_v1_dynamic_enable_ExpectAnyArgs() ppu_v1_dynamic_enable_CMockExpectAnyArgs(__LINE__)
void ppu_v1_dynamic_enable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_dynamic_enable_Expect(ppu, min_dyn_state) ppu_v1_dynamic_enable_CMockExpect(__LINE__, ppu, min_dyn_state)
void ppu_v1_dynamic_enable_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode min_dyn_state);
typedef void (* CMOCK_ppu_v1_dynamic_enable_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode min_dyn_state, int cmock_num_calls);
void ppu_v1_dynamic_enable_AddCallback(CMOCK_ppu_v1_dynamic_enable_CALLBACK Callback);
void ppu_v1_dynamic_enable_Stub(CMOCK_ppu_v1_dynamic_enable_CALLBACK Callback);
#define ppu_v1_dynamic_enable_StubWithCallback ppu_v1_dynamic_enable_Stub
#define ppu_v1_dynamic_enable_ExpectWithArray(ppu, ppu_Depth, min_dyn_state) ppu_v1_dynamic_enable_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, min_dyn_state)
void ppu_v1_dynamic_enable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode min_dyn_state);
#define ppu_v1_dynamic_enable_ReturnThruPtr_ppu(ppu) ppu_v1_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_dynamic_enable_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_dynamic_enable_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_dynamic_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_dynamic_enable_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_dynamic_enable_IgnoreArg_ppu() ppu_v1_dynamic_enable_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_dynamic_enable_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_dynamic_enable_IgnoreArg_min_dyn_state() ppu_v1_dynamic_enable_CMockIgnoreArg_min_dyn_state(__LINE__)
void ppu_v1_dynamic_enable_CMockIgnoreArg_min_dyn_state(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_lock_off_enable_Ignore() ppu_v1_lock_off_enable_CMockIgnore()
void ppu_v1_lock_off_enable_CMockIgnore(void);
#define ppu_v1_lock_off_enable_StopIgnore() ppu_v1_lock_off_enable_CMockStopIgnore()
void ppu_v1_lock_off_enable_CMockStopIgnore(void);
#define ppu_v1_lock_off_enable_ExpectAnyArgs() ppu_v1_lock_off_enable_CMockExpectAnyArgs(__LINE__)
void ppu_v1_lock_off_enable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_lock_off_enable_Expect(ppu) ppu_v1_lock_off_enable_CMockExpect(__LINE__, ppu)
void ppu_v1_lock_off_enable_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_lock_off_enable_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_lock_off_enable_AddCallback(CMOCK_ppu_v1_lock_off_enable_CALLBACK Callback);
void ppu_v1_lock_off_enable_Stub(CMOCK_ppu_v1_lock_off_enable_CALLBACK Callback);
#define ppu_v1_lock_off_enable_StubWithCallback ppu_v1_lock_off_enable_Stub
#define ppu_v1_lock_off_enable_ExpectWithArray(ppu, ppu_Depth) ppu_v1_lock_off_enable_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_lock_off_enable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_lock_off_enable_ReturnThruPtr_ppu(ppu) ppu_v1_lock_off_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_lock_off_enable_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_lock_off_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_lock_off_enable_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_lock_off_enable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_lock_off_enable_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_lock_off_enable_IgnoreArg_ppu() ppu_v1_lock_off_enable_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_lock_off_enable_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_lock_off_disable_Ignore() ppu_v1_lock_off_disable_CMockIgnore()
void ppu_v1_lock_off_disable_CMockIgnore(void);
#define ppu_v1_lock_off_disable_StopIgnore() ppu_v1_lock_off_disable_CMockStopIgnore()
void ppu_v1_lock_off_disable_CMockStopIgnore(void);
#define ppu_v1_lock_off_disable_ExpectAnyArgs() ppu_v1_lock_off_disable_CMockExpectAnyArgs(__LINE__)
void ppu_v1_lock_off_disable_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_lock_off_disable_Expect(ppu) ppu_v1_lock_off_disable_CMockExpect(__LINE__, ppu)
void ppu_v1_lock_off_disable_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_lock_off_disable_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_lock_off_disable_AddCallback(CMOCK_ppu_v1_lock_off_disable_CALLBACK Callback);
void ppu_v1_lock_off_disable_Stub(CMOCK_ppu_v1_lock_off_disable_CALLBACK Callback);
#define ppu_v1_lock_off_disable_StubWithCallback ppu_v1_lock_off_disable_Stub
#define ppu_v1_lock_off_disable_ExpectWithArray(ppu, ppu_Depth) ppu_v1_lock_off_disable_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_lock_off_disable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_lock_off_disable_ReturnThruPtr_ppu(ppu) ppu_v1_lock_off_disable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_lock_off_disable_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_lock_off_disable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_lock_off_disable_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_lock_off_disable_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_lock_off_disable_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_lock_off_disable_IgnoreArg_ppu() ppu_v1_lock_off_disable_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_lock_off_disable_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_power_mode_IgnoreAndReturn(cmock_retval) ppu_v1_get_power_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_power_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_power_mode_StopIgnore() ppu_v1_get_power_mode_CMockStopIgnore()
void ppu_v1_get_power_mode_CMockStopIgnore(void);
#define ppu_v1_get_power_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_power_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_power_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_power_mode_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_power_mode_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_power_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode cmock_to_return);
typedef enum ppu_v1_mode (* CMOCK_ppu_v1_get_power_mode_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_power_mode_AddCallback(CMOCK_ppu_v1_get_power_mode_CALLBACK Callback);
void ppu_v1_get_power_mode_Stub(CMOCK_ppu_v1_get_power_mode_CALLBACK Callback);
#define ppu_v1_get_power_mode_StubWithCallback ppu_v1_get_power_mode_Stub
#define ppu_v1_get_power_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_power_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_power_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_power_mode_ReturnThruPtr_ppu(ppu) ppu_v1_get_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_power_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_power_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_power_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_power_mode_IgnoreArg_ppu() ppu_v1_get_power_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_power_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_programmed_power_mode_IgnoreAndReturn(cmock_retval) ppu_v1_get_programmed_power_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_programmed_power_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_programmed_power_mode_StopIgnore() ppu_v1_get_programmed_power_mode_CMockStopIgnore()
void ppu_v1_get_programmed_power_mode_CMockStopIgnore(void);
#define ppu_v1_get_programmed_power_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_programmed_power_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_programmed_power_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_programmed_power_mode_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_programmed_power_mode_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_programmed_power_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode cmock_to_return);
typedef enum ppu_v1_mode (* CMOCK_ppu_v1_get_programmed_power_mode_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_programmed_power_mode_AddCallback(CMOCK_ppu_v1_get_programmed_power_mode_CALLBACK Callback);
void ppu_v1_get_programmed_power_mode_Stub(CMOCK_ppu_v1_get_programmed_power_mode_CALLBACK Callback);
#define ppu_v1_get_programmed_power_mode_StubWithCallback ppu_v1_get_programmed_power_mode_Stub
#define ppu_v1_get_programmed_power_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_programmed_power_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_programmed_power_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode cmock_to_return);
#define ppu_v1_get_programmed_power_mode_ReturnThruPtr_ppu(ppu) ppu_v1_get_programmed_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_programmed_power_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_programmed_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_programmed_power_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_programmed_power_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_programmed_power_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_programmed_power_mode_IgnoreArg_ppu() ppu_v1_get_programmed_power_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_programmed_power_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_operating_mode_IgnoreAndReturn(cmock_retval) ppu_v1_get_operating_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_operating_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_operating_mode_StopIgnore() ppu_v1_get_operating_mode_CMockStopIgnore()
void ppu_v1_get_operating_mode_CMockStopIgnore(void);
#define ppu_v1_get_operating_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_operating_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_operating_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_operating_mode_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_operating_mode_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_operating_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_opmode cmock_to_return);
typedef enum ppu_v1_opmode (* CMOCK_ppu_v1_get_operating_mode_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_operating_mode_AddCallback(CMOCK_ppu_v1_get_operating_mode_CALLBACK Callback);
void ppu_v1_get_operating_mode_Stub(CMOCK_ppu_v1_get_operating_mode_CALLBACK Callback);
#define ppu_v1_get_operating_mode_StubWithCallback ppu_v1_get_operating_mode_Stub
#define ppu_v1_get_operating_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_operating_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_operating_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_operating_mode_ReturnThruPtr_ppu(ppu) ppu_v1_get_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_operating_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_operating_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_operating_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_operating_mode_IgnoreArg_ppu() ppu_v1_get_operating_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_operating_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_programmed_operating_mode_IgnoreAndReturn(cmock_retval) ppu_v1_get_programmed_operating_mode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_programmed_operating_mode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_programmed_operating_mode_StopIgnore() ppu_v1_get_programmed_operating_mode_CMockStopIgnore()
void ppu_v1_get_programmed_operating_mode_CMockStopIgnore(void);
#define ppu_v1_get_programmed_operating_mode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_programmed_operating_mode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_programmed_operating_mode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_programmed_operating_mode_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_programmed_operating_mode_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_programmed_operating_mode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_opmode cmock_to_return);
typedef enum ppu_v1_opmode (* CMOCK_ppu_v1_get_programmed_operating_mode_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_programmed_operating_mode_AddCallback(CMOCK_ppu_v1_get_programmed_operating_mode_CALLBACK Callback);
void ppu_v1_get_programmed_operating_mode_Stub(CMOCK_ppu_v1_get_programmed_operating_mode_CALLBACK Callback);
#define ppu_v1_get_programmed_operating_mode_StubWithCallback ppu_v1_get_programmed_operating_mode_Stub
#define ppu_v1_get_programmed_operating_mode_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_programmed_operating_mode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_programmed_operating_mode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_opmode cmock_to_return);
#define ppu_v1_get_programmed_operating_mode_ReturnThruPtr_ppu(ppu) ppu_v1_get_programmed_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_programmed_operating_mode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_programmed_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_programmed_operating_mode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_programmed_operating_mode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_programmed_operating_mode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_programmed_operating_mode_IgnoreArg_ppu() ppu_v1_get_programmed_operating_mode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_programmed_operating_mode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_dynamic_enabled_IgnoreAndReturn(cmock_retval) ppu_v1_is_dynamic_enabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_dynamic_enabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_dynamic_enabled_StopIgnore() ppu_v1_is_dynamic_enabled_CMockStopIgnore()
void ppu_v1_is_dynamic_enabled_CMockStopIgnore(void);
#define ppu_v1_is_dynamic_enabled_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_dynamic_enabled_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_dynamic_enabled_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_dynamic_enabled_ExpectAndReturn(ppu, cmock_retval) ppu_v1_is_dynamic_enabled_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_is_dynamic_enabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_dynamic_enabled_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_is_dynamic_enabled_AddCallback(CMOCK_ppu_v1_is_dynamic_enabled_CALLBACK Callback);
void ppu_v1_is_dynamic_enabled_Stub(CMOCK_ppu_v1_is_dynamic_enabled_CALLBACK Callback);
#define ppu_v1_is_dynamic_enabled_StubWithCallback ppu_v1_is_dynamic_enabled_Stub
#define ppu_v1_is_dynamic_enabled_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_is_dynamic_enabled_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_is_dynamic_enabled_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, bool cmock_to_return);
#define ppu_v1_is_dynamic_enabled_ReturnThruPtr_ppu(ppu) ppu_v1_is_dynamic_enabled_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_dynamic_enabled_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_dynamic_enabled_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_dynamic_enabled_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_dynamic_enabled_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_dynamic_enabled_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_dynamic_enabled_IgnoreArg_ppu() ppu_v1_is_dynamic_enabled_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_dynamic_enabled_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_locked_IgnoreAndReturn(cmock_retval) ppu_v1_is_locked_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_locked_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_locked_StopIgnore() ppu_v1_is_locked_CMockStopIgnore()
void ppu_v1_is_locked_CMockStopIgnore(void);
#define ppu_v1_is_locked_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_locked_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_locked_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_locked_ExpectAndReturn(ppu, cmock_retval) ppu_v1_is_locked_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_is_locked_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_locked_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_is_locked_AddCallback(CMOCK_ppu_v1_is_locked_CALLBACK Callback);
void ppu_v1_is_locked_Stub(CMOCK_ppu_v1_is_locked_CALLBACK Callback);
#define ppu_v1_is_locked_StubWithCallback ppu_v1_is_locked_Stub
#define ppu_v1_is_locked_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_is_locked_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_is_locked_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, bool cmock_to_return);
#define ppu_v1_is_locked_ReturnThruPtr_ppu(ppu) ppu_v1_is_locked_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_locked_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_locked_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_locked_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_locked_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_locked_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_locked_IgnoreArg_ppu() ppu_v1_is_locked_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_locked_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_power_devactive_high_IgnoreAndReturn(cmock_retval) ppu_v1_is_power_devactive_high_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_power_devactive_high_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_power_devactive_high_StopIgnore() ppu_v1_is_power_devactive_high_CMockStopIgnore()
void ppu_v1_is_power_devactive_high_CMockStopIgnore(void);
#define ppu_v1_is_power_devactive_high_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_power_devactive_high_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_power_devactive_high_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_power_devactive_high_ExpectAndReturn(ppu, ppu_mode, cmock_retval) ppu_v1_is_power_devactive_high_CMockExpectAndReturn(__LINE__, ppu, ppu_mode, cmock_retval)
void ppu_v1_is_power_devactive_high_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_power_devactive_high_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_num_calls);
void ppu_v1_is_power_devactive_high_AddCallback(CMOCK_ppu_v1_is_power_devactive_high_CALLBACK Callback);
void ppu_v1_is_power_devactive_high_Stub(CMOCK_ppu_v1_is_power_devactive_high_CALLBACK Callback);
#define ppu_v1_is_power_devactive_high_StubWithCallback ppu_v1_is_power_devactive_high_Stub
#define ppu_v1_is_power_devactive_high_ExpectWithArrayAndReturn(ppu, ppu_Depth, ppu_mode, cmock_retval) ppu_v1_is_power_devactive_high_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, ppu_mode, cmock_retval)
void ppu_v1_is_power_devactive_high_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, bool cmock_to_return);
#define ppu_v1_is_power_devactive_high_ReturnThruPtr_ppu(ppu) ppu_v1_is_power_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_power_devactive_high_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_power_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_power_devactive_high_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_power_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_power_devactive_high_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_power_devactive_high_IgnoreArg_ppu() ppu_v1_is_power_devactive_high_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_power_devactive_high_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_power_devactive_high_IgnoreArg_ppu_mode() ppu_v1_is_power_devactive_high_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_is_power_devactive_high_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_op_devactive_high_IgnoreAndReturn(cmock_retval) ppu_v1_is_op_devactive_high_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_op_devactive_high_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_op_devactive_high_StopIgnore() ppu_v1_is_op_devactive_high_CMockStopIgnore()
void ppu_v1_is_op_devactive_high_CMockStopIgnore(void);
#define ppu_v1_is_op_devactive_high_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_op_devactive_high_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_op_devactive_high_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_op_devactive_high_ExpectAndReturn(ppu, op_devactive, cmock_retval) ppu_v1_is_op_devactive_high_CMockExpectAndReturn(__LINE__, ppu, op_devactive, cmock_retval)
void ppu_v1_is_op_devactive_high_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_op_devactive_high_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, int cmock_num_calls);
void ppu_v1_is_op_devactive_high_AddCallback(CMOCK_ppu_v1_is_op_devactive_high_CALLBACK Callback);
void ppu_v1_is_op_devactive_high_Stub(CMOCK_ppu_v1_is_op_devactive_high_CALLBACK Callback);
#define ppu_v1_is_op_devactive_high_StubWithCallback ppu_v1_is_op_devactive_high_Stub
#define ppu_v1_is_op_devactive_high_ExpectWithArrayAndReturn(ppu, ppu_Depth, op_devactive, cmock_retval) ppu_v1_is_op_devactive_high_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, op_devactive, cmock_retval)
void ppu_v1_is_op_devactive_high_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_op_devactive op_devactive, bool cmock_to_return);
#define ppu_v1_is_op_devactive_high_ReturnThruPtr_ppu(ppu) ppu_v1_is_op_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_op_devactive_high_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_op_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_op_devactive_high_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_op_devactive_high_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_op_devactive_high_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_op_devactive_high_IgnoreArg_ppu() ppu_v1_is_op_devactive_high_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_op_devactive_high_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_op_devactive_high_IgnoreArg_op_devactive() ppu_v1_is_op_devactive_high_CMockIgnoreArg_op_devactive(__LINE__)
void ppu_v1_is_op_devactive_high_CMockIgnoreArg_op_devactive(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_off_unlock_Ignore() ppu_v1_off_unlock_CMockIgnore()
void ppu_v1_off_unlock_CMockIgnore(void);
#define ppu_v1_off_unlock_StopIgnore() ppu_v1_off_unlock_CMockStopIgnore()
void ppu_v1_off_unlock_CMockStopIgnore(void);
#define ppu_v1_off_unlock_ExpectAnyArgs() ppu_v1_off_unlock_CMockExpectAnyArgs(__LINE__)
void ppu_v1_off_unlock_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_off_unlock_Expect(ppu) ppu_v1_off_unlock_CMockExpect(__LINE__, ppu)
void ppu_v1_off_unlock_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_off_unlock_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_off_unlock_AddCallback(CMOCK_ppu_v1_off_unlock_CALLBACK Callback);
void ppu_v1_off_unlock_Stub(CMOCK_ppu_v1_off_unlock_CALLBACK Callback);
#define ppu_v1_off_unlock_StubWithCallback ppu_v1_off_unlock_Stub
#define ppu_v1_off_unlock_ExpectWithArray(ppu, ppu_Depth) ppu_v1_off_unlock_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_off_unlock_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_off_unlock_ReturnThruPtr_ppu(ppu) ppu_v1_off_unlock_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_off_unlock_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_off_unlock_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_off_unlock_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_off_unlock_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_off_unlock_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_off_unlock_IgnoreArg_ppu() ppu_v1_off_unlock_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_off_unlock_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_disable_devactive_Ignore() ppu_v1_disable_devactive_CMockIgnore()
void ppu_v1_disable_devactive_CMockIgnore(void);
#define ppu_v1_disable_devactive_StopIgnore() ppu_v1_disable_devactive_CMockStopIgnore()
void ppu_v1_disable_devactive_CMockStopIgnore(void);
#define ppu_v1_disable_devactive_ExpectAnyArgs() ppu_v1_disable_devactive_CMockExpectAnyArgs(__LINE__)
void ppu_v1_disable_devactive_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_disable_devactive_Expect(ppu) ppu_v1_disable_devactive_CMockExpect(__LINE__, ppu)
void ppu_v1_disable_devactive_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_disable_devactive_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_disable_devactive_AddCallback(CMOCK_ppu_v1_disable_devactive_CALLBACK Callback);
void ppu_v1_disable_devactive_Stub(CMOCK_ppu_v1_disable_devactive_CALLBACK Callback);
#define ppu_v1_disable_devactive_StubWithCallback ppu_v1_disable_devactive_Stub
#define ppu_v1_disable_devactive_ExpectWithArray(ppu, ppu_Depth) ppu_v1_disable_devactive_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_disable_devactive_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_disable_devactive_ReturnThruPtr_ppu(ppu) ppu_v1_disable_devactive_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_disable_devactive_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_disable_devactive_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_disable_devactive_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_disable_devactive_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_disable_devactive_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_disable_devactive_IgnoreArg_ppu() ppu_v1_disable_devactive_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_disable_devactive_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_disable_handshake_Ignore() ppu_v1_disable_handshake_CMockIgnore()
void ppu_v1_disable_handshake_CMockIgnore(void);
#define ppu_v1_disable_handshake_StopIgnore() ppu_v1_disable_handshake_CMockStopIgnore()
void ppu_v1_disable_handshake_CMockStopIgnore(void);
#define ppu_v1_disable_handshake_ExpectAnyArgs() ppu_v1_disable_handshake_CMockExpectAnyArgs(__LINE__)
void ppu_v1_disable_handshake_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_disable_handshake_Expect(ppu) ppu_v1_disable_handshake_CMockExpect(__LINE__, ppu)
void ppu_v1_disable_handshake_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu);
typedef void (* CMOCK_ppu_v1_disable_handshake_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_disable_handshake_AddCallback(CMOCK_ppu_v1_disable_handshake_CALLBACK Callback);
void ppu_v1_disable_handshake_Stub(CMOCK_ppu_v1_disable_handshake_CALLBACK Callback);
#define ppu_v1_disable_handshake_StubWithCallback ppu_v1_disable_handshake_Stub
#define ppu_v1_disable_handshake_ExpectWithArray(ppu, ppu_Depth) ppu_v1_disable_handshake_CMockExpectWithArray(__LINE__, ppu, ppu_Depth)
void ppu_v1_disable_handshake_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth);
#define ppu_v1_disable_handshake_ReturnThruPtr_ppu(ppu) ppu_v1_disable_handshake_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_disable_handshake_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_disable_handshake_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_disable_handshake_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_disable_handshake_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_disable_handshake_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_disable_handshake_IgnoreArg_ppu() ppu_v1_disable_handshake_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_disable_handshake_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_mask_Ignore() ppu_v1_interrupt_mask_CMockIgnore()
void ppu_v1_interrupt_mask_CMockIgnore(void);
#define ppu_v1_interrupt_mask_StopIgnore() ppu_v1_interrupt_mask_CMockStopIgnore()
void ppu_v1_interrupt_mask_CMockStopIgnore(void);
#define ppu_v1_interrupt_mask_ExpectAnyArgs() ppu_v1_interrupt_mask_CMockExpectAnyArgs(__LINE__)
void ppu_v1_interrupt_mask_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_mask_Expect(ppu, mask) ppu_v1_interrupt_mask_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_interrupt_mask_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_interrupt_mask_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_interrupt_mask_AddCallback(CMOCK_ppu_v1_interrupt_mask_CALLBACK Callback);
void ppu_v1_interrupt_mask_Stub(CMOCK_ppu_v1_interrupt_mask_CALLBACK Callback);
#define ppu_v1_interrupt_mask_StubWithCallback ppu_v1_interrupt_mask_Stub
#define ppu_v1_interrupt_mask_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_interrupt_mask_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_interrupt_mask_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_interrupt_mask_ReturnThruPtr_ppu(ppu) ppu_v1_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_interrupt_mask_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_interrupt_mask_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_interrupt_mask_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_interrupt_mask_IgnoreArg_ppu() ppu_v1_interrupt_mask_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_interrupt_mask_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_mask_IgnoreArg_mask() ppu_v1_interrupt_mask_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_interrupt_mask_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_mask_Ignore() ppu_v1_additional_interrupt_mask_CMockIgnore()
void ppu_v1_additional_interrupt_mask_CMockIgnore(void);
#define ppu_v1_additional_interrupt_mask_StopIgnore() ppu_v1_additional_interrupt_mask_CMockStopIgnore()
void ppu_v1_additional_interrupt_mask_CMockStopIgnore(void);
#define ppu_v1_additional_interrupt_mask_ExpectAnyArgs() ppu_v1_additional_interrupt_mask_CMockExpectAnyArgs(__LINE__)
void ppu_v1_additional_interrupt_mask_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_mask_Expect(ppu, mask) ppu_v1_additional_interrupt_mask_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_additional_interrupt_mask_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_additional_interrupt_mask_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_additional_interrupt_mask_AddCallback(CMOCK_ppu_v1_additional_interrupt_mask_CALLBACK Callback);
void ppu_v1_additional_interrupt_mask_Stub(CMOCK_ppu_v1_additional_interrupt_mask_CALLBACK Callback);
#define ppu_v1_additional_interrupt_mask_StubWithCallback ppu_v1_additional_interrupt_mask_Stub
#define ppu_v1_additional_interrupt_mask_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_additional_interrupt_mask_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_additional_interrupt_mask_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_additional_interrupt_mask_ReturnThruPtr_ppu(ppu) ppu_v1_additional_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_additional_interrupt_mask_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_additional_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_additional_interrupt_mask_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_additional_interrupt_mask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_additional_interrupt_mask_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_additional_interrupt_mask_IgnoreArg_ppu() ppu_v1_additional_interrupt_mask_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_additional_interrupt_mask_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_mask_IgnoreArg_mask() ppu_v1_additional_interrupt_mask_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_additional_interrupt_mask_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_unmask_Ignore() ppu_v1_interrupt_unmask_CMockIgnore()
void ppu_v1_interrupt_unmask_CMockIgnore(void);
#define ppu_v1_interrupt_unmask_StopIgnore() ppu_v1_interrupt_unmask_CMockStopIgnore()
void ppu_v1_interrupt_unmask_CMockStopIgnore(void);
#define ppu_v1_interrupt_unmask_ExpectAnyArgs() ppu_v1_interrupt_unmask_CMockExpectAnyArgs(__LINE__)
void ppu_v1_interrupt_unmask_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_unmask_Expect(ppu, mask) ppu_v1_interrupt_unmask_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_interrupt_unmask_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_interrupt_unmask_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_interrupt_unmask_AddCallback(CMOCK_ppu_v1_interrupt_unmask_CALLBACK Callback);
void ppu_v1_interrupt_unmask_Stub(CMOCK_ppu_v1_interrupt_unmask_CALLBACK Callback);
#define ppu_v1_interrupt_unmask_StubWithCallback ppu_v1_interrupt_unmask_Stub
#define ppu_v1_interrupt_unmask_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_interrupt_unmask_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_interrupt_unmask_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_interrupt_unmask_ReturnThruPtr_ppu(ppu) ppu_v1_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_interrupt_unmask_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_interrupt_unmask_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_interrupt_unmask_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_interrupt_unmask_IgnoreArg_ppu() ppu_v1_interrupt_unmask_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_interrupt_unmask_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_interrupt_unmask_IgnoreArg_mask() ppu_v1_interrupt_unmask_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_interrupt_unmask_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_unmask_Ignore() ppu_v1_additional_interrupt_unmask_CMockIgnore()
void ppu_v1_additional_interrupt_unmask_CMockIgnore(void);
#define ppu_v1_additional_interrupt_unmask_StopIgnore() ppu_v1_additional_interrupt_unmask_CMockStopIgnore()
void ppu_v1_additional_interrupt_unmask_CMockStopIgnore(void);
#define ppu_v1_additional_interrupt_unmask_ExpectAnyArgs() ppu_v1_additional_interrupt_unmask_CMockExpectAnyArgs(__LINE__)
void ppu_v1_additional_interrupt_unmask_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_unmask_Expect(ppu, mask) ppu_v1_additional_interrupt_unmask_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_additional_interrupt_unmask_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_additional_interrupt_unmask_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_additional_interrupt_unmask_AddCallback(CMOCK_ppu_v1_additional_interrupt_unmask_CALLBACK Callback);
void ppu_v1_additional_interrupt_unmask_Stub(CMOCK_ppu_v1_additional_interrupt_unmask_CALLBACK Callback);
#define ppu_v1_additional_interrupt_unmask_StubWithCallback ppu_v1_additional_interrupt_unmask_Stub
#define ppu_v1_additional_interrupt_unmask_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_additional_interrupt_unmask_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_additional_interrupt_unmask_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_additional_interrupt_unmask_ReturnThruPtr_ppu(ppu) ppu_v1_additional_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_additional_interrupt_unmask_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_additional_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_additional_interrupt_unmask_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_additional_interrupt_unmask_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_additional_interrupt_unmask_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_additional_interrupt_unmask_IgnoreArg_ppu() ppu_v1_additional_interrupt_unmask_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_additional_interrupt_unmask_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_additional_interrupt_unmask_IgnoreArg_mask() ppu_v1_additional_interrupt_unmask_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_additional_interrupt_unmask_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_additional_interrupt_pending_IgnoreAndReturn(cmock_retval) ppu_v1_is_additional_interrupt_pending_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_additional_interrupt_pending_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_additional_interrupt_pending_StopIgnore() ppu_v1_is_additional_interrupt_pending_CMockStopIgnore()
void ppu_v1_is_additional_interrupt_pending_CMockStopIgnore(void);
#define ppu_v1_is_additional_interrupt_pending_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_additional_interrupt_pending_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_additional_interrupt_pending_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_additional_interrupt_pending_ExpectAndReturn(ppu, mask, cmock_retval) ppu_v1_is_additional_interrupt_pending_CMockExpectAndReturn(__LINE__, ppu, mask, cmock_retval)
void ppu_v1_is_additional_interrupt_pending_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_additional_interrupt_pending_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_is_additional_interrupt_pending_AddCallback(CMOCK_ppu_v1_is_additional_interrupt_pending_CALLBACK Callback);
void ppu_v1_is_additional_interrupt_pending_Stub(CMOCK_ppu_v1_is_additional_interrupt_pending_CALLBACK Callback);
#define ppu_v1_is_additional_interrupt_pending_StubWithCallback ppu_v1_is_additional_interrupt_pending_Stub
#define ppu_v1_is_additional_interrupt_pending_ExpectWithArrayAndReturn(ppu, ppu_Depth, mask, cmock_retval) ppu_v1_is_additional_interrupt_pending_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, mask, cmock_retval)
void ppu_v1_is_additional_interrupt_pending_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask, bool cmock_to_return);
#define ppu_v1_is_additional_interrupt_pending_ReturnThruPtr_ppu(ppu) ppu_v1_is_additional_interrupt_pending_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_additional_interrupt_pending_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_additional_interrupt_pending_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_additional_interrupt_pending_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_additional_interrupt_pending_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_additional_interrupt_pending_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_additional_interrupt_pending_IgnoreArg_ppu() ppu_v1_is_additional_interrupt_pending_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_additional_interrupt_pending_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_additional_interrupt_pending_IgnoreArg_mask() ppu_v1_is_additional_interrupt_pending_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_is_additional_interrupt_pending_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_interrupt_Ignore() ppu_v1_ack_interrupt_CMockIgnore()
void ppu_v1_ack_interrupt_CMockIgnore(void);
#define ppu_v1_ack_interrupt_StopIgnore() ppu_v1_ack_interrupt_CMockStopIgnore()
void ppu_v1_ack_interrupt_CMockStopIgnore(void);
#define ppu_v1_ack_interrupt_ExpectAnyArgs() ppu_v1_ack_interrupt_CMockExpectAnyArgs(__LINE__)
void ppu_v1_ack_interrupt_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_interrupt_Expect(ppu, mask) ppu_v1_ack_interrupt_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_ack_interrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_ack_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_ack_interrupt_AddCallback(CMOCK_ppu_v1_ack_interrupt_CALLBACK Callback);
void ppu_v1_ack_interrupt_Stub(CMOCK_ppu_v1_ack_interrupt_CALLBACK Callback);
#define ppu_v1_ack_interrupt_StubWithCallback ppu_v1_ack_interrupt_Stub
#define ppu_v1_ack_interrupt_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_ack_interrupt_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_ack_interrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_ack_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_ack_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_ack_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_ack_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_ack_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_ack_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_ack_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_ack_interrupt_IgnoreArg_ppu() ppu_v1_ack_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_ack_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_interrupt_IgnoreArg_mask() ppu_v1_ack_interrupt_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_ack_interrupt_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_additional_interrupt_Ignore() ppu_v1_ack_additional_interrupt_CMockIgnore()
void ppu_v1_ack_additional_interrupt_CMockIgnore(void);
#define ppu_v1_ack_additional_interrupt_StopIgnore() ppu_v1_ack_additional_interrupt_CMockStopIgnore()
void ppu_v1_ack_additional_interrupt_CMockStopIgnore(void);
#define ppu_v1_ack_additional_interrupt_ExpectAnyArgs() ppu_v1_ack_additional_interrupt_CMockExpectAnyArgs(__LINE__)
void ppu_v1_ack_additional_interrupt_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_additional_interrupt_Expect(ppu, mask) ppu_v1_ack_additional_interrupt_CMockExpect(__LINE__, ppu, mask)
void ppu_v1_ack_additional_interrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int mask);
typedef void (* CMOCK_ppu_v1_ack_additional_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, unsigned int mask, int cmock_num_calls);
void ppu_v1_ack_additional_interrupt_AddCallback(CMOCK_ppu_v1_ack_additional_interrupt_CALLBACK Callback);
void ppu_v1_ack_additional_interrupt_Stub(CMOCK_ppu_v1_ack_additional_interrupt_CALLBACK Callback);
#define ppu_v1_ack_additional_interrupt_StubWithCallback ppu_v1_ack_additional_interrupt_Stub
#define ppu_v1_ack_additional_interrupt_ExpectWithArray(ppu, ppu_Depth, mask) ppu_v1_ack_additional_interrupt_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, mask)
void ppu_v1_ack_additional_interrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int mask);
#define ppu_v1_ack_additional_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_ack_additional_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_ack_additional_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_ack_additional_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_ack_additional_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_ack_additional_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_ack_additional_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_ack_additional_interrupt_IgnoreArg_ppu() ppu_v1_ack_additional_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_ack_additional_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_additional_interrupt_IgnoreArg_mask() ppu_v1_ack_additional_interrupt_CMockIgnoreArg_mask(__LINE__)
void ppu_v1_ack_additional_interrupt_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_input_edge_sensitivity_Ignore() ppu_v1_set_input_edge_sensitivity_CMockIgnore()
void ppu_v1_set_input_edge_sensitivity_CMockIgnore(void);
#define ppu_v1_set_input_edge_sensitivity_StopIgnore() ppu_v1_set_input_edge_sensitivity_CMockStopIgnore()
void ppu_v1_set_input_edge_sensitivity_CMockStopIgnore(void);
#define ppu_v1_set_input_edge_sensitivity_ExpectAnyArgs() ppu_v1_set_input_edge_sensitivity_CMockExpectAnyArgs(__LINE__)
void ppu_v1_set_input_edge_sensitivity_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_input_edge_sensitivity_Expect(ppu, ppu_mode, edge_sensitivity) ppu_v1_set_input_edge_sensitivity_CMockExpect(__LINE__, ppu, ppu_mode, edge_sensitivity)
void ppu_v1_set_input_edge_sensitivity_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, enum ppu_v1_edge_sensitivity edge_sensitivity);
typedef void (* CMOCK_ppu_v1_set_input_edge_sensitivity_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, enum ppu_v1_edge_sensitivity edge_sensitivity, int cmock_num_calls);
void ppu_v1_set_input_edge_sensitivity_AddCallback(CMOCK_ppu_v1_set_input_edge_sensitivity_CALLBACK Callback);
void ppu_v1_set_input_edge_sensitivity_Stub(CMOCK_ppu_v1_set_input_edge_sensitivity_CALLBACK Callback);
#define ppu_v1_set_input_edge_sensitivity_StubWithCallback ppu_v1_set_input_edge_sensitivity_Stub
#define ppu_v1_set_input_edge_sensitivity_ExpectWithArray(ppu, ppu_Depth, ppu_mode, edge_sensitivity) ppu_v1_set_input_edge_sensitivity_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, ppu_mode, edge_sensitivity)
void ppu_v1_set_input_edge_sensitivity_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, enum ppu_v1_edge_sensitivity edge_sensitivity);
#define ppu_v1_set_input_edge_sensitivity_ReturnThruPtr_ppu(ppu) ppu_v1_set_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_set_input_edge_sensitivity_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_set_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_set_input_edge_sensitivity_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_set_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_set_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_set_input_edge_sensitivity_IgnoreArg_ppu() ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_input_edge_sensitivity_IgnoreArg_ppu_mode() ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_input_edge_sensitivity_IgnoreArg_edge_sensitivity() ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_edge_sensitivity(__LINE__)
void ppu_v1_set_input_edge_sensitivity_CMockIgnoreArg_edge_sensitivity(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_input_edge_sensitivity_IgnoreAndReturn(cmock_retval) ppu_v1_get_input_edge_sensitivity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_input_edge_sensitivity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_input_edge_sensitivity_StopIgnore() ppu_v1_get_input_edge_sensitivity_CMockStopIgnore()
void ppu_v1_get_input_edge_sensitivity_CMockStopIgnore(void);
#define ppu_v1_get_input_edge_sensitivity_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_input_edge_sensitivity_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_input_edge_sensitivity_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_input_edge_sensitivity_ExpectAndReturn(ppu, ppu_mode, cmock_retval) ppu_v1_get_input_edge_sensitivity_CMockExpectAndReturn(__LINE__, ppu, ppu_mode, cmock_retval)
void ppu_v1_get_input_edge_sensitivity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, enum ppu_v1_edge_sensitivity cmock_to_return);
typedef enum ppu_v1_edge_sensitivity (* CMOCK_ppu_v1_get_input_edge_sensitivity_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_num_calls);
void ppu_v1_get_input_edge_sensitivity_AddCallback(CMOCK_ppu_v1_get_input_edge_sensitivity_CALLBACK Callback);
void ppu_v1_get_input_edge_sensitivity_Stub(CMOCK_ppu_v1_get_input_edge_sensitivity_CALLBACK Callback);
#define ppu_v1_get_input_edge_sensitivity_StubWithCallback ppu_v1_get_input_edge_sensitivity_Stub
#define ppu_v1_get_input_edge_sensitivity_ExpectWithArrayAndReturn(ppu, ppu_Depth, ppu_mode, cmock_retval) ppu_v1_get_input_edge_sensitivity_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, ppu_mode, cmock_retval)
void ppu_v1_get_input_edge_sensitivity_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_input_edge_sensitivity_ReturnThruPtr_ppu(ppu) ppu_v1_get_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_input_edge_sensitivity_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_input_edge_sensitivity_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_input_edge_sensitivity_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_input_edge_sensitivity_IgnoreArg_ppu() ppu_v1_get_input_edge_sensitivity_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_input_edge_sensitivity_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_input_edge_sensitivity_IgnoreArg_ppu_mode() ppu_v1_get_input_edge_sensitivity_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_get_input_edge_sensitivity_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_power_active_edge_interrupt_Ignore() ppu_v1_ack_power_active_edge_interrupt_CMockIgnore()
void ppu_v1_ack_power_active_edge_interrupt_CMockIgnore(void);
#define ppu_v1_ack_power_active_edge_interrupt_StopIgnore() ppu_v1_ack_power_active_edge_interrupt_CMockStopIgnore()
void ppu_v1_ack_power_active_edge_interrupt_CMockStopIgnore(void);
#define ppu_v1_ack_power_active_edge_interrupt_ExpectAnyArgs() ppu_v1_ack_power_active_edge_interrupt_CMockExpectAnyArgs(__LINE__)
void ppu_v1_ack_power_active_edge_interrupt_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_power_active_edge_interrupt_Expect(ppu, ppu_mode) ppu_v1_ack_power_active_edge_interrupt_CMockExpect(__LINE__, ppu, ppu_mode)
void ppu_v1_ack_power_active_edge_interrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode);
typedef void (* CMOCK_ppu_v1_ack_power_active_edge_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_num_calls);
void ppu_v1_ack_power_active_edge_interrupt_AddCallback(CMOCK_ppu_v1_ack_power_active_edge_interrupt_CALLBACK Callback);
void ppu_v1_ack_power_active_edge_interrupt_Stub(CMOCK_ppu_v1_ack_power_active_edge_interrupt_CALLBACK Callback);
#define ppu_v1_ack_power_active_edge_interrupt_StubWithCallback ppu_v1_ack_power_active_edge_interrupt_Stub
#define ppu_v1_ack_power_active_edge_interrupt_ExpectWithArray(ppu, ppu_Depth, ppu_mode) ppu_v1_ack_power_active_edge_interrupt_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, ppu_mode)
void ppu_v1_ack_power_active_edge_interrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode);
#define ppu_v1_ack_power_active_edge_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_ack_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_ack_power_active_edge_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_ack_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_ack_power_active_edge_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_ack_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_ack_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_ack_power_active_edge_interrupt_IgnoreArg_ppu() ppu_v1_ack_power_active_edge_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_ack_power_active_edge_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_power_active_edge_interrupt_IgnoreArg_ppu_mode() ppu_v1_ack_power_active_edge_interrupt_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_ack_power_active_edge_interrupt_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_power_active_edge_interrupt_IgnoreAndReturn(cmock_retval) ppu_v1_is_power_active_edge_interrupt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_power_active_edge_interrupt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_power_active_edge_interrupt_StopIgnore() ppu_v1_is_power_active_edge_interrupt_CMockStopIgnore()
void ppu_v1_is_power_active_edge_interrupt_CMockStopIgnore(void);
#define ppu_v1_is_power_active_edge_interrupt_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_power_active_edge_interrupt_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_power_active_edge_interrupt_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_power_active_edge_interrupt_ExpectAndReturn(ppu, ppu_mode, cmock_retval) ppu_v1_is_power_active_edge_interrupt_CMockExpectAndReturn(__LINE__, ppu, ppu_mode, cmock_retval)
void ppu_v1_is_power_active_edge_interrupt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_power_active_edge_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_mode ppu_mode, int cmock_num_calls);
void ppu_v1_is_power_active_edge_interrupt_AddCallback(CMOCK_ppu_v1_is_power_active_edge_interrupt_CALLBACK Callback);
void ppu_v1_is_power_active_edge_interrupt_Stub(CMOCK_ppu_v1_is_power_active_edge_interrupt_CALLBACK Callback);
#define ppu_v1_is_power_active_edge_interrupt_StubWithCallback ppu_v1_is_power_active_edge_interrupt_Stub
#define ppu_v1_is_power_active_edge_interrupt_ExpectWithArrayAndReturn(ppu, ppu_Depth, ppu_mode, cmock_retval) ppu_v1_is_power_active_edge_interrupt_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, ppu_mode, cmock_retval)
void ppu_v1_is_power_active_edge_interrupt_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_mode ppu_mode, bool cmock_to_return);
#define ppu_v1_is_power_active_edge_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_is_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_power_active_edge_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_power_active_edge_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_power_active_edge_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_power_active_edge_interrupt_IgnoreArg_ppu() ppu_v1_is_power_active_edge_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_power_active_edge_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_power_active_edge_interrupt_IgnoreArg_ppu_mode() ppu_v1_is_power_active_edge_interrupt_CMockIgnoreArg_ppu_mode(__LINE__)
void ppu_v1_is_power_active_edge_interrupt_CMockIgnoreArg_ppu_mode(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_op_active_edge_sensitivity_Ignore() ppu_v1_set_op_active_edge_sensitivity_CMockIgnore()
void ppu_v1_set_op_active_edge_sensitivity_CMockIgnore(void);
#define ppu_v1_set_op_active_edge_sensitivity_StopIgnore() ppu_v1_set_op_active_edge_sensitivity_CMockStopIgnore()
void ppu_v1_set_op_active_edge_sensitivity_CMockStopIgnore(void);
#define ppu_v1_set_op_active_edge_sensitivity_ExpectAnyArgs() ppu_v1_set_op_active_edge_sensitivity_CMockExpectAnyArgs(__LINE__)
void ppu_v1_set_op_active_edge_sensitivity_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_op_active_edge_sensitivity_Expect(ppu, op_devactive, edge_sensitivity) ppu_v1_set_op_active_edge_sensitivity_CMockExpect(__LINE__, ppu, op_devactive, edge_sensitivity)
void ppu_v1_set_op_active_edge_sensitivity_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, enum ppu_v1_edge_sensitivity edge_sensitivity);
typedef void (* CMOCK_ppu_v1_set_op_active_edge_sensitivity_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, enum ppu_v1_edge_sensitivity edge_sensitivity, int cmock_num_calls);
void ppu_v1_set_op_active_edge_sensitivity_AddCallback(CMOCK_ppu_v1_set_op_active_edge_sensitivity_CALLBACK Callback);
void ppu_v1_set_op_active_edge_sensitivity_Stub(CMOCK_ppu_v1_set_op_active_edge_sensitivity_CALLBACK Callback);
#define ppu_v1_set_op_active_edge_sensitivity_StubWithCallback ppu_v1_set_op_active_edge_sensitivity_Stub
#define ppu_v1_set_op_active_edge_sensitivity_ExpectWithArray(ppu, ppu_Depth, op_devactive, edge_sensitivity) ppu_v1_set_op_active_edge_sensitivity_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, op_devactive, edge_sensitivity)
void ppu_v1_set_op_active_edge_sensitivity_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_op_devactive op_devactive, enum ppu_v1_edge_sensitivity edge_sensitivity);
#define ppu_v1_set_op_active_edge_sensitivity_ReturnThruPtr_ppu(ppu) ppu_v1_set_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_set_op_active_edge_sensitivity_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_set_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_set_op_active_edge_sensitivity_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_set_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_set_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_set_op_active_edge_sensitivity_IgnoreArg_ppu() ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_op_active_edge_sensitivity_IgnoreArg_op_devactive() ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_op_devactive(__LINE__)
void ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_op_devactive(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_set_op_active_edge_sensitivity_IgnoreArg_edge_sensitivity() ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_edge_sensitivity(__LINE__)
void ppu_v1_set_op_active_edge_sensitivity_CMockIgnoreArg_edge_sensitivity(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_op_active_edge_sensitivity_IgnoreAndReturn(cmock_retval) ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_op_active_edge_sensitivity_StopIgnore() ppu_v1_get_op_active_edge_sensitivity_CMockStopIgnore()
void ppu_v1_get_op_active_edge_sensitivity_CMockStopIgnore(void);
#define ppu_v1_get_op_active_edge_sensitivity_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_op_active_edge_sensitivity_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_op_active_edge_sensitivity_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_op_active_edge_sensitivity_ExpectAndReturn(ppu, op_devactive, cmock_retval) ppu_v1_get_op_active_edge_sensitivity_CMockExpectAndReturn(__LINE__, ppu, op_devactive, cmock_retval)
void ppu_v1_get_op_active_edge_sensitivity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, enum ppu_v1_edge_sensitivity cmock_to_return);
typedef enum ppu_v1_edge_sensitivity (* CMOCK_ppu_v1_get_op_active_edge_sensitivity_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, int cmock_num_calls);
void ppu_v1_get_op_active_edge_sensitivity_AddCallback(CMOCK_ppu_v1_get_op_active_edge_sensitivity_CALLBACK Callback);
void ppu_v1_get_op_active_edge_sensitivity_Stub(CMOCK_ppu_v1_get_op_active_edge_sensitivity_CALLBACK Callback);
#define ppu_v1_get_op_active_edge_sensitivity_StubWithCallback ppu_v1_get_op_active_edge_sensitivity_Stub
#define ppu_v1_get_op_active_edge_sensitivity_ExpectWithArrayAndReturn(ppu, ppu_Depth, op_devactive, cmock_retval) ppu_v1_get_op_active_edge_sensitivity_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, op_devactive, cmock_retval)
void ppu_v1_get_op_active_edge_sensitivity_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_op_devactive op_devactive, enum ppu_v1_edge_sensitivity cmock_to_return);
#define ppu_v1_get_op_active_edge_sensitivity_ReturnThruPtr_ppu(ppu) ppu_v1_get_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_op_active_edge_sensitivity_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_op_active_edge_sensitivity_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_op_active_edge_sensitivity_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_op_active_edge_sensitivity_IgnoreArg_ppu() ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_op_active_edge_sensitivity_IgnoreArg_op_devactive() ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreArg_op_devactive(__LINE__)
void ppu_v1_get_op_active_edge_sensitivity_CMockIgnoreArg_op_devactive(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_op_active_edge_interrupt_Ignore() ppu_v1_ack_op_active_edge_interrupt_CMockIgnore()
void ppu_v1_ack_op_active_edge_interrupt_CMockIgnore(void);
#define ppu_v1_ack_op_active_edge_interrupt_StopIgnore() ppu_v1_ack_op_active_edge_interrupt_CMockStopIgnore()
void ppu_v1_ack_op_active_edge_interrupt_CMockStopIgnore(void);
#define ppu_v1_ack_op_active_edge_interrupt_ExpectAnyArgs() ppu_v1_ack_op_active_edge_interrupt_CMockExpectAnyArgs(__LINE__)
void ppu_v1_ack_op_active_edge_interrupt_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_op_active_edge_interrupt_Expect(ppu, op_devactive) ppu_v1_ack_op_active_edge_interrupt_CMockExpect(__LINE__, ppu, op_devactive)
void ppu_v1_ack_op_active_edge_interrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive);
typedef void (* CMOCK_ppu_v1_ack_op_active_edge_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, int cmock_num_calls);
void ppu_v1_ack_op_active_edge_interrupt_AddCallback(CMOCK_ppu_v1_ack_op_active_edge_interrupt_CALLBACK Callback);
void ppu_v1_ack_op_active_edge_interrupt_Stub(CMOCK_ppu_v1_ack_op_active_edge_interrupt_CALLBACK Callback);
#define ppu_v1_ack_op_active_edge_interrupt_StubWithCallback ppu_v1_ack_op_active_edge_interrupt_Stub
#define ppu_v1_ack_op_active_edge_interrupt_ExpectWithArray(ppu, ppu_Depth, op_devactive) ppu_v1_ack_op_active_edge_interrupt_CMockExpectWithArray(__LINE__, ppu, ppu_Depth, op_devactive)
void ppu_v1_ack_op_active_edge_interrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_op_devactive op_devactive);
#define ppu_v1_ack_op_active_edge_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_ack_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_ack_op_active_edge_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_ack_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_ack_op_active_edge_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_ack_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_ack_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_ack_op_active_edge_interrupt_IgnoreArg_ppu() ppu_v1_ack_op_active_edge_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_ack_op_active_edge_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_ack_op_active_edge_interrupt_IgnoreArg_op_devactive() ppu_v1_ack_op_active_edge_interrupt_CMockIgnoreArg_op_devactive(__LINE__)
void ppu_v1_ack_op_active_edge_interrupt_CMockIgnoreArg_op_devactive(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_op_active_edge_interrupt_IgnoreAndReturn(cmock_retval) ppu_v1_is_op_active_edge_interrupt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_op_active_edge_interrupt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_op_active_edge_interrupt_StopIgnore() ppu_v1_is_op_active_edge_interrupt_CMockStopIgnore()
void ppu_v1_is_op_active_edge_interrupt_CMockStopIgnore(void);
#define ppu_v1_is_op_active_edge_interrupt_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_op_active_edge_interrupt_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_op_active_edge_interrupt_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_op_active_edge_interrupt_ExpectAndReturn(ppu, op_devactive, cmock_retval) ppu_v1_is_op_active_edge_interrupt_CMockExpectAndReturn(__LINE__, ppu, op_devactive, cmock_retval)
void ppu_v1_is_op_active_edge_interrupt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_op_active_edge_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, enum ppu_v1_op_devactive op_devactive, int cmock_num_calls);
void ppu_v1_is_op_active_edge_interrupt_AddCallback(CMOCK_ppu_v1_is_op_active_edge_interrupt_CALLBACK Callback);
void ppu_v1_is_op_active_edge_interrupt_Stub(CMOCK_ppu_v1_is_op_active_edge_interrupt_CALLBACK Callback);
#define ppu_v1_is_op_active_edge_interrupt_StubWithCallback ppu_v1_is_op_active_edge_interrupt_Stub
#define ppu_v1_is_op_active_edge_interrupt_ExpectWithArrayAndReturn(ppu, ppu_Depth, op_devactive, cmock_retval) ppu_v1_is_op_active_edge_interrupt_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, op_devactive, cmock_retval)
void ppu_v1_is_op_active_edge_interrupt_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, enum ppu_v1_op_devactive op_devactive, bool cmock_to_return);
#define ppu_v1_is_op_active_edge_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_is_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_op_active_edge_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_op_active_edge_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_op_active_edge_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_op_active_edge_interrupt_IgnoreArg_ppu() ppu_v1_is_op_active_edge_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_op_active_edge_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_op_active_edge_interrupt_IgnoreArg_op_devactive() ppu_v1_is_op_active_edge_interrupt_CMockIgnoreArg_op_devactive(__LINE__)
void ppu_v1_is_op_active_edge_interrupt_CMockIgnoreArg_op_devactive(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_is_dyn_policy_min_interrupt_IgnoreAndReturn(cmock_retval) ppu_v1_is_dyn_policy_min_interrupt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_dyn_policy_min_interrupt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_dyn_policy_min_interrupt_StopIgnore() ppu_v1_is_dyn_policy_min_interrupt_CMockStopIgnore()
void ppu_v1_is_dyn_policy_min_interrupt_CMockStopIgnore(void);
#define ppu_v1_is_dyn_policy_min_interrupt_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_is_dyn_policy_min_interrupt_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_is_dyn_policy_min_interrupt_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define ppu_v1_is_dyn_policy_min_interrupt_ExpectAndReturn(ppu, cmock_retval) ppu_v1_is_dyn_policy_min_interrupt_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_is_dyn_policy_min_interrupt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, bool cmock_to_return);
typedef bool (* CMOCK_ppu_v1_is_dyn_policy_min_interrupt_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_is_dyn_policy_min_interrupt_AddCallback(CMOCK_ppu_v1_is_dyn_policy_min_interrupt_CALLBACK Callback);
void ppu_v1_is_dyn_policy_min_interrupt_Stub(CMOCK_ppu_v1_is_dyn_policy_min_interrupt_CALLBACK Callback);
#define ppu_v1_is_dyn_policy_min_interrupt_StubWithCallback ppu_v1_is_dyn_policy_min_interrupt_Stub
#define ppu_v1_is_dyn_policy_min_interrupt_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_is_dyn_policy_min_interrupt_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_is_dyn_policy_min_interrupt_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, bool cmock_to_return);
#define ppu_v1_is_dyn_policy_min_interrupt_ReturnThruPtr_ppu(ppu) ppu_v1_is_dyn_policy_min_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_is_dyn_policy_min_interrupt_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_is_dyn_policy_min_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_is_dyn_policy_min_interrupt_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_is_dyn_policy_min_interrupt_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_is_dyn_policy_min_interrupt_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_is_dyn_policy_min_interrupt_IgnoreArg_ppu() ppu_v1_is_dyn_policy_min_interrupt_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_is_dyn_policy_min_interrupt_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_num_opmode_IgnoreAndReturn(cmock_retval) ppu_v1_get_num_opmode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_num_opmode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define ppu_v1_get_num_opmode_StopIgnore() ppu_v1_get_num_opmode_CMockStopIgnore()
void ppu_v1_get_num_opmode_CMockStopIgnore(void);
#define ppu_v1_get_num_opmode_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_num_opmode_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_num_opmode_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define ppu_v1_get_num_opmode_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_num_opmode_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_num_opmode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_ppu_v1_get_num_opmode_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_num_opmode_AddCallback(CMOCK_ppu_v1_get_num_opmode_CALLBACK Callback);
void ppu_v1_get_num_opmode_Stub(CMOCK_ppu_v1_get_num_opmode_CALLBACK Callback);
#define ppu_v1_get_num_opmode_StubWithCallback ppu_v1_get_num_opmode_Stub
#define ppu_v1_get_num_opmode_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_num_opmode_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_num_opmode_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int cmock_to_return);
#define ppu_v1_get_num_opmode_ReturnThruPtr_ppu(ppu) ppu_v1_get_num_opmode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_num_opmode_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_num_opmode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_num_opmode_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_num_opmode_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_num_opmode_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_num_opmode_IgnoreArg_ppu() ppu_v1_get_num_opmode_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_num_opmode_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);
#define ppu_v1_get_arch_id_IgnoreAndReturn(cmock_retval) ppu_v1_get_arch_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_arch_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define ppu_v1_get_arch_id_StopIgnore() ppu_v1_get_arch_id_CMockStopIgnore()
void ppu_v1_get_arch_id_CMockStopIgnore(void);
#define ppu_v1_get_arch_id_ExpectAnyArgsAndReturn(cmock_retval) ppu_v1_get_arch_id_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ppu_v1_get_arch_id_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define ppu_v1_get_arch_id_ExpectAndReturn(ppu, cmock_retval) ppu_v1_get_arch_id_CMockExpectAndReturn(__LINE__, ppu, cmock_retval)
void ppu_v1_get_arch_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_ppu_v1_get_arch_id_CALLBACK)(struct ppu_v1_reg* ppu, int cmock_num_calls);
void ppu_v1_get_arch_id_AddCallback(CMOCK_ppu_v1_get_arch_id_CALLBACK Callback);
void ppu_v1_get_arch_id_Stub(CMOCK_ppu_v1_get_arch_id_CALLBACK Callback);
#define ppu_v1_get_arch_id_StubWithCallback ppu_v1_get_arch_id_Stub
#define ppu_v1_get_arch_id_ExpectWithArrayAndReturn(ppu, ppu_Depth, cmock_retval) ppu_v1_get_arch_id_CMockExpectWithArrayAndReturn(__LINE__, ppu, ppu_Depth, cmock_retval)
void ppu_v1_get_arch_id_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, int ppu_Depth, unsigned int cmock_to_return);
#define ppu_v1_get_arch_id_ReturnThruPtr_ppu(ppu) ppu_v1_get_arch_id_CMockReturnMemThruPtr_ppu(__LINE__, ppu, sizeof(struct ppu_v1_reg))
#define ppu_v1_get_arch_id_ReturnArrayThruPtr_ppu(ppu, cmock_len) ppu_v1_get_arch_id_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_len * sizeof(*ppu))
#define ppu_v1_get_arch_id_ReturnMemThruPtr_ppu(ppu, cmock_size) ppu_v1_get_arch_id_CMockReturnMemThruPtr_ppu(__LINE__, ppu, cmock_size)
void ppu_v1_get_arch_id_CMockReturnMemThruPtr_ppu(UNITY_LINE_TYPE cmock_line, struct ppu_v1_reg* ppu, size_t cmock_size);
#define ppu_v1_get_arch_id_IgnoreArg_ppu() ppu_v1_get_arch_id_CMockIgnoreArg_ppu(__LINE__)
void ppu_v1_get_arch_id_CMockIgnoreArg_ppu(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
