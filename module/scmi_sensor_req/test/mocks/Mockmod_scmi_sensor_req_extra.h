/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_SCMI_SENSOR_REQ_EXTRA_H
#define _MOCKMOD_SCMI_SENSOR_REQ_EXTRA_H

#include "unity.h"
#include "mod_scmi_sensor_req_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_scmi_sensor_req_extra_Init(void);
void Mockmod_scmi_sensor_req_extra_Destroy(void);
void Mockmod_scmi_sensor_req_extra_Verify(void);




#define reading_complete_ExpectAnyArgs() reading_complete_CMockExpectAnyArgs(__LINE__)
void reading_complete_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define reading_complete_Expect(id, response) reading_complete_CMockExpect(__LINE__, id, response)
void reading_complete_CMockExpect(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_driver_resp_params* response);
typedef void (* CMOCK_reading_complete_CALLBACK)(fwk_id_t id, struct mod_sensor_driver_resp_params* response, int cmock_num_calls);
void reading_complete_AddCallback(CMOCK_reading_complete_CALLBACK Callback);
void reading_complete_Stub(CMOCK_reading_complete_CALLBACK Callback);
#define reading_complete_StubWithCallback reading_complete_Stub
#define reading_complete_ExpectWithArray(id, response, response_Depth) reading_complete_CMockExpectWithArray(__LINE__, id, response, response_Depth)
void reading_complete_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_driver_resp_params* response, int response_Depth);
#define reading_complete_ReturnThruPtr_response(response) reading_complete_CMockReturnMemThruPtr_response(__LINE__, response, sizeof(struct mod_sensor_driver_resp_params))
#define reading_complete_ReturnArrayThruPtr_response(response, cmock_len) reading_complete_CMockReturnMemThruPtr_response(__LINE__, response, cmock_len * sizeof(*response))
#define reading_complete_ReturnMemThruPtr_response(response, cmock_size) reading_complete_CMockReturnMemThruPtr_response(__LINE__, response, cmock_size)
void reading_complete_CMockReturnMemThruPtr_response(UNITY_LINE_TYPE cmock_line, struct mod_sensor_driver_resp_params* response, size_t cmock_size);
#define scmi_send_message_ExpectAnyArgsAndReturn(cmock_retval) scmi_send_message_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void scmi_send_message_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define scmi_send_message_ExpectAndReturn(scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_size, request_ack_by_interrupt, cmock_retval) scmi_send_message_CMockExpectAndReturn(__LINE__, scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_size, request_ack_by_interrupt, cmock_retval)
void scmi_send_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, size_t payload_size, bool request_ack_by_interrupt, int cmock_to_return);
typedef int (* CMOCK_scmi_send_message_CALLBACK)(uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, size_t payload_size, bool request_ack_by_interrupt, int cmock_num_calls);
void scmi_send_message_AddCallback(CMOCK_scmi_send_message_CALLBACK Callback);
void scmi_send_message_Stub(CMOCK_scmi_send_message_CALLBACK Callback);
#define scmi_send_message_StubWithCallback scmi_send_message_Stub
#define scmi_send_message_ExpectWithArrayAndReturn(scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_Depth, payload_size, request_ack_by_interrupt, cmock_retval) scmi_send_message_CMockExpectWithArrayAndReturn(__LINE__, scmi_message_id, scmi_protocol_id, token, service_id, payload, payload_Depth, payload_size, request_ack_by_interrupt, cmock_retval)
void scmi_send_message_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t scmi_message_id, uint8_t scmi_protocol_id, uint8_t token, fwk_id_t service_id, const void* payload, int payload_Depth, size_t payload_size, bool request_ack_by_interrupt, int cmock_to_return);
#define response_message_handler_ExpectAnyArgsAndReturn(cmock_retval) response_message_handler_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void response_message_handler_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define response_message_handler_ExpectAndReturn(service_id, cmock_retval) response_message_handler_CMockExpectAndReturn(__LINE__, service_id, cmock_retval)
void response_message_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, int cmock_to_return);
typedef int (* CMOCK_response_message_handler_CALLBACK)(fwk_id_t service_id, int cmock_num_calls);
void response_message_handler_AddCallback(CMOCK_response_message_handler_CALLBACK Callback);
void response_message_handler_Stub(CMOCK_response_message_handler_CALLBACK Callback);
#define response_message_handler_StubWithCallback response_message_handler_Stub
#define fake_message_handler_ExpectAnyArgsAndReturn(cmock_retval) fake_message_handler_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void fake_message_handler_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define fake_message_handler_ExpectAndReturn(service_id, payload, payload_size, cmock_retval) fake_message_handler_CMockExpectAndReturn(__LINE__, service_id, payload, payload_size, cmock_retval)
void fake_message_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, const uint32_t* payload, size_t payload_size, int cmock_to_return);
typedef int (* CMOCK_fake_message_handler_CALLBACK)(fwk_id_t service_id, const uint32_t* payload, size_t payload_size, int cmock_num_calls);
void fake_message_handler_AddCallback(CMOCK_fake_message_handler_CALLBACK Callback);
void fake_message_handler_Stub(CMOCK_fake_message_handler_CALLBACK Callback);
#define fake_message_handler_StubWithCallback fake_message_handler_Stub
#define fake_message_handler_ExpectWithArrayAndReturn(service_id, payload, payload_Depth, payload_size, cmock_retval) fake_message_handler_CMockExpectWithArrayAndReturn(__LINE__, service_id, payload, payload_Depth, payload_size, cmock_retval)
void fake_message_handler_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t service_id, const uint32_t* payload, int payload_Depth, size_t payload_size, int cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
