/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_METRICS_ANALYZER_EXTRA_H
#define _MOCKMOD_METRICS_ANALYZER_EXTRA_H

#include "unity.h"
#include "mod_metrics_analyzer_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_metrics_analyzer_extra_Init(void);
void Mockmod_metrics_analyzer_extra_Destroy(void);
void Mockmod_metrics_analyzer_extra_Verify(void);




#define get_limit_IgnoreAndReturn(cmock_retval) get_limit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_limit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define get_limit_StopIgnore() get_limit_CMockStopIgnore()
void get_limit_CMockStopIgnore(void);
#define get_limit_ExpectAnyArgsAndReturn(cmock_retval) get_limit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_limit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define get_limit_ExpectAndReturn(id, power_limit, cmock_retval) get_limit_CMockExpectAndReturn(__LINE__, id, power_limit, cmock_retval)
void get_limit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, uint32_t* power_limit, int cmock_to_return);
typedef int (* CMOCK_get_limit_CALLBACK)(fwk_id_t id, uint32_t* power_limit, int cmock_num_calls);
void get_limit_AddCallback(CMOCK_get_limit_CALLBACK Callback);
void get_limit_Stub(CMOCK_get_limit_CALLBACK Callback);
#define get_limit_StubWithCallback get_limit_Stub
#define get_limit_ExpectWithArrayAndReturn(id, power_limit, power_limit_Depth, cmock_retval) get_limit_CMockExpectWithArrayAndReturn(__LINE__, id, power_limit, power_limit_Depth, cmock_retval)
void get_limit_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, uint32_t* power_limit, int power_limit_Depth, int cmock_to_return);
#define get_limit_ReturnThruPtr_power_limit(power_limit) get_limit_CMockReturnMemThruPtr_power_limit(__LINE__, power_limit, sizeof(uint32_t))
#define get_limit_ReturnArrayThruPtr_power_limit(power_limit, cmock_len) get_limit_CMockReturnMemThruPtr_power_limit(__LINE__, power_limit, cmock_len * sizeof(*power_limit))
#define get_limit_ReturnMemThruPtr_power_limit(power_limit, cmock_size) get_limit_CMockReturnMemThruPtr_power_limit(__LINE__, power_limit, cmock_size)
void get_limit_CMockReturnMemThruPtr_power_limit(UNITY_LINE_TYPE cmock_line, uint32_t* power_limit, size_t cmock_size);
#define get_limit_IgnoreArg_id() get_limit_CMockIgnoreArg_id(__LINE__)
void get_limit_CMockIgnoreArg_id(UNITY_LINE_TYPE cmock_line);
#define get_limit_IgnoreArg_power_limit() get_limit_CMockIgnoreArg_power_limit(__LINE__)
void get_limit_CMockIgnoreArg_power_limit(UNITY_LINE_TYPE cmock_line);
#define set_limit_IgnoreAndReturn(cmock_retval) set_limit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void set_limit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define set_limit_StopIgnore() set_limit_CMockStopIgnore()
void set_limit_CMockStopIgnore(void);
#define set_limit_ExpectAnyArgsAndReturn(cmock_retval) set_limit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void set_limit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define set_limit_ExpectAndReturn(id, power_limit, cmock_retval) set_limit_CMockExpectAndReturn(__LINE__, id, power_limit, cmock_retval)
void set_limit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, uint32_t power_limit, int cmock_to_return);
typedef int (* CMOCK_set_limit_CALLBACK)(fwk_id_t id, uint32_t power_limit, int cmock_num_calls);
void set_limit_AddCallback(CMOCK_set_limit_CALLBACK Callback);
void set_limit_Stub(CMOCK_set_limit_CALLBACK Callback);
#define set_limit_StubWithCallback set_limit_Stub
#define set_limit_IgnoreArg_id() set_limit_CMockIgnoreArg_id(__LINE__)
void set_limit_CMockIgnoreArg_id(UNITY_LINE_TYPE cmock_line);
#define set_limit_IgnoreArg_power_limit() set_limit_CMockIgnoreArg_power_limit(__LINE__)
void set_limit_CMockIgnoreArg_power_limit(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
