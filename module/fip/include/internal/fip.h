/*
 * Arm SCP/MCP Software
 * Copyright (c) 2020, Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Description:
 *     This header describes the data structures used in a FIP based layout of
 *     firmware image(s), generated by the ARM fiptool.
 *
 *     The structures are based on data from
 *     https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git, Tag: v2.3
 *
 *     The byte structure and alignment of the structures in this header
 *     represent the structures of the FIP stored on a non-volatile platform
 *     storage. This will, in general, never change unless the signature/ToC
 *     header name is changed.
 */

#ifndef INTERNAL_FIP_H
#define INTERNAL_FIP_H

#include <fwk_attributes.h>

#include <stdbool.h>
#include <stdint.h>

#define FIP_TOC_HEADER_NAME UINT32_C(0xAA640001)

/*
 * Standard UUIDs as defined by TF-A.
 */
#define FIP_UUID_SCP_BL2 \
    (struct fip_uuid) \
    { \
        .u = { \
            0x97, \
            0x66, \
            0xfd, \
            0x3d, \
            0x89, \
            0xbe, \
            0xe8, \
            0x49, \
            0xae, \
            0x5d, \
            0x78, \
            0xa1, \
            0x40, \
            0x60, \
            0x82, \
            0x13 \
        } \
    }

#define FIP_UUID_TFA_BL31 \
    (struct fip_uuid) \
    { \
        .u = { \
            0x47, \
            0xd4, \
            0x08, \
            0x6d, \
            0x4c, \
            0xfe, \
            0x98, \
            0x46, \
            0x9b, \
            0x95, \
            0x29, \
            0x50, \
            0xcb, \
            0xbd, \
            0x5a, \
            0x00 \
        } \
    }

#define FIP_UUID_NULL \
    (struct fip_uuid) \
    { \
        .u = { \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00, \
            0x00 \
        } \
    }

/*
 * NOTE: Add any custom UUIDs after this comment. Move them
 * under standard UUIDs section above once they have been
 * standardized by TF-A.
 */
#define FIP_UUID_MCP_BL2 \
    (struct fip_uuid) \
    { \
        .u = { \
            0x54, \
            0x46, \
            0x42, \
            0x22, \
            0xa4, \
            0xcf, \
            0x4b, \
            0xf8, \
            0xb1, \
            0xb6, \
            0xce, \
            0xe7, \
            0xda, \
            0xde, \
            0x53, \
            0x9e \
        } \
    }

/*
 * Firmware Image Package (FIP) layout.
 *
 * The FIP layout consists of a table of contents (ToC) followed by payload
 * data.
 *
 * The ToC itself has a header followed by one or more table entries. The ToC
 * is terminated by an end marker entry.
 *
 * All ToC entries describe some payload data that has been appended to the end
 * of the binary package. With the information provided in the ToC entry the
 * corresponding payload data can be retrieved.
 *
 *  +----------------+
 *  | ToC Header     |
 *  +----------------+
 *  | ToC Entry 0    |
 *  +----------------+
 *  | ToC Entry 1    |
 *  +----------------+
 *  | ToC End Marker |
 *  +----------------+
 *  |                |
 *  |     Data 0     |
 *  |                |
 *  +----------------+
 *  |                |
 *  |     Data 1     |
 *  |                |
 *  +----------------+
 */

struct FWK_PACKED fip_uuid {
    uint8_t u[16];
};

struct FWK_PACKED fip_toc_header {
    uint32_t name;
    uint32_t serial_number;
    uint64_t flags;
};

struct FWK_PACKED fip_toc_entry {
    struct fip_uuid uuid;
    uint64_t offset_address;
    uint64_t size;
    uint64_t flags;
};

struct FWK_PACKED fip_toc {
    struct fip_toc_header header;
    struct fip_toc_entry entry[];
};

#endif /* INTERNAL_FIP_H */
