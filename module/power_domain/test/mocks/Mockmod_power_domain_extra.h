/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_POWER_DOMAIN_EXTRA_H
#define _MOCKMOD_POWER_DOMAIN_EXTRA_H

#include "unity.h"
#include "mod_power_domain_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_power_domain_extra_Init(void);
void Mockmod_power_domain_extra_Destroy(void);
void Mockmod_power_domain_extra_Verify(void);




#define pd_driver_set_state_IgnoreAndReturn(cmock_retval) pd_driver_set_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_set_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_set_state_StopIgnore() pd_driver_set_state_CMockStopIgnore()
void pd_driver_set_state_CMockStopIgnore(void);
#define pd_driver_set_state_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_set_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_set_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_set_state_ExpectAndReturn(dev_id, state, cmock_retval) pd_driver_set_state_CMockExpectAndReturn(__LINE__, dev_id, state, cmock_retval)
void pd_driver_set_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, unsigned int state, int cmock_to_return);
typedef int (* CMOCK_pd_driver_set_state_CALLBACK)(fwk_id_t dev_id, unsigned int state, int cmock_num_calls);
void pd_driver_set_state_AddCallback(CMOCK_pd_driver_set_state_CALLBACK Callback);
void pd_driver_set_state_Stub(CMOCK_pd_driver_set_state_CALLBACK Callback);
#define pd_driver_set_state_StubWithCallback pd_driver_set_state_Stub
#define pd_driver_set_state_IgnoreArg_dev_id() pd_driver_set_state_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_set_state_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_set_state_IgnoreArg_state() pd_driver_set_state_CMockIgnoreArg_state(__LINE__)
void pd_driver_set_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define pd_driver_get_state_IgnoreAndReturn(cmock_retval) pd_driver_get_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_get_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_get_state_StopIgnore() pd_driver_get_state_CMockStopIgnore()
void pd_driver_get_state_CMockStopIgnore(void);
#define pd_driver_get_state_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_get_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_get_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_get_state_ExpectAndReturn(dev_id, state, cmock_retval) pd_driver_get_state_CMockExpectAndReturn(__LINE__, dev_id, state, cmock_retval)
void pd_driver_get_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, unsigned int* state, int cmock_to_return);
typedef int (* CMOCK_pd_driver_get_state_CALLBACK)(fwk_id_t dev_id, unsigned int* state, int cmock_num_calls);
void pd_driver_get_state_AddCallback(CMOCK_pd_driver_get_state_CALLBACK Callback);
void pd_driver_get_state_Stub(CMOCK_pd_driver_get_state_CALLBACK Callback);
#define pd_driver_get_state_StubWithCallback pd_driver_get_state_Stub
#define pd_driver_get_state_ExpectWithArrayAndReturn(dev_id, state, state_Depth, cmock_retval) pd_driver_get_state_CMockExpectWithArrayAndReturn(__LINE__, dev_id, state, state_Depth, cmock_retval)
void pd_driver_get_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, unsigned int* state, int state_Depth, int cmock_to_return);
#define pd_driver_get_state_ReturnThruPtr_state(state) pd_driver_get_state_CMockReturnMemThruPtr_state(__LINE__, state, sizeof(unsigned int))
#define pd_driver_get_state_ReturnArrayThruPtr_state(state, cmock_len) pd_driver_get_state_CMockReturnMemThruPtr_state(__LINE__, state, cmock_len * sizeof(*state))
#define pd_driver_get_state_ReturnMemThruPtr_state(state, cmock_size) pd_driver_get_state_CMockReturnMemThruPtr_state(__LINE__, state, cmock_size)
void pd_driver_get_state_CMockReturnMemThruPtr_state(UNITY_LINE_TYPE cmock_line, unsigned int* state, size_t cmock_size);
#define pd_driver_get_state_IgnoreArg_dev_id() pd_driver_get_state_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_get_state_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_get_state_IgnoreArg_state() pd_driver_get_state_CMockIgnoreArg_state(__LINE__)
void pd_driver_get_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define pd_driver_reset_IgnoreAndReturn(cmock_retval) pd_driver_reset_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_reset_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_reset_StopIgnore() pd_driver_reset_CMockStopIgnore()
void pd_driver_reset_CMockStopIgnore(void);
#define pd_driver_reset_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_reset_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_reset_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_reset_ExpectAndReturn(dev_id, cmock_retval) pd_driver_reset_CMockExpectAndReturn(__LINE__, dev_id, cmock_retval)
void pd_driver_reset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, int cmock_to_return);
typedef int (* CMOCK_pd_driver_reset_CALLBACK)(fwk_id_t dev_id, int cmock_num_calls);
void pd_driver_reset_AddCallback(CMOCK_pd_driver_reset_CALLBACK Callback);
void pd_driver_reset_Stub(CMOCK_pd_driver_reset_CALLBACK Callback);
#define pd_driver_reset_StubWithCallback pd_driver_reset_Stub
#define pd_driver_reset_IgnoreArg_dev_id() pd_driver_reset_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_reset_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_deny_IgnoreAndReturn(cmock_retval) pd_driver_deny_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_deny_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define pd_driver_deny_StopIgnore() pd_driver_deny_CMockStopIgnore()
void pd_driver_deny_CMockStopIgnore(void);
#define pd_driver_deny_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_deny_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_deny_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define pd_driver_deny_ExpectAndReturn(dev_id, state, cmock_retval) pd_driver_deny_CMockExpectAndReturn(__LINE__, dev_id, state, cmock_retval)
void pd_driver_deny_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, unsigned int state, bool cmock_to_return);
typedef bool (* CMOCK_pd_driver_deny_CALLBACK)(fwk_id_t dev_id, unsigned int state, int cmock_num_calls);
void pd_driver_deny_AddCallback(CMOCK_pd_driver_deny_CALLBACK Callback);
void pd_driver_deny_Stub(CMOCK_pd_driver_deny_CALLBACK Callback);
#define pd_driver_deny_StubWithCallback pd_driver_deny_Stub
#define pd_driver_deny_IgnoreArg_dev_id() pd_driver_deny_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_deny_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_deny_IgnoreArg_state() pd_driver_deny_CMockIgnoreArg_state(__LINE__)
void pd_driver_deny_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define pd_driver_prepare_core_for_system_suspend_IgnoreAndReturn(cmock_retval) pd_driver_prepare_core_for_system_suspend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_prepare_core_for_system_suspend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_prepare_core_for_system_suspend_StopIgnore() pd_driver_prepare_core_for_system_suspend_CMockStopIgnore()
void pd_driver_prepare_core_for_system_suspend_CMockStopIgnore(void);
#define pd_driver_prepare_core_for_system_suspend_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_prepare_core_for_system_suspend_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_prepare_core_for_system_suspend_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_prepare_core_for_system_suspend_ExpectAndReturn(dev_id, cmock_retval) pd_driver_prepare_core_for_system_suspend_CMockExpectAndReturn(__LINE__, dev_id, cmock_retval)
void pd_driver_prepare_core_for_system_suspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, int cmock_to_return);
typedef int (* CMOCK_pd_driver_prepare_core_for_system_suspend_CALLBACK)(fwk_id_t dev_id, int cmock_num_calls);
void pd_driver_prepare_core_for_system_suspend_AddCallback(CMOCK_pd_driver_prepare_core_for_system_suspend_CALLBACK Callback);
void pd_driver_prepare_core_for_system_suspend_Stub(CMOCK_pd_driver_prepare_core_for_system_suspend_CALLBACK Callback);
#define pd_driver_prepare_core_for_system_suspend_StubWithCallback pd_driver_prepare_core_for_system_suspend_Stub
#define pd_driver_prepare_core_for_system_suspend_IgnoreArg_dev_id() pd_driver_prepare_core_for_system_suspend_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_prepare_core_for_system_suspend_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_shutdown_IgnoreAndReturn(cmock_retval) pd_driver_shutdown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_driver_shutdown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_shutdown_StopIgnore() pd_driver_shutdown_CMockStopIgnore()
void pd_driver_shutdown_CMockStopIgnore(void);
#define pd_driver_shutdown_ExpectAnyArgsAndReturn(cmock_retval) pd_driver_shutdown_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_driver_shutdown_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_driver_shutdown_ExpectAndReturn(dev_id, system_shutdown, cmock_retval) pd_driver_shutdown_CMockExpectAndReturn(__LINE__, dev_id, system_shutdown, cmock_retval)
void pd_driver_shutdown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t dev_id, enum mod_pd_system_shutdown system_shutdown, int cmock_to_return);
typedef int (* CMOCK_pd_driver_shutdown_CALLBACK)(fwk_id_t dev_id, enum mod_pd_system_shutdown system_shutdown, int cmock_num_calls);
void pd_driver_shutdown_AddCallback(CMOCK_pd_driver_shutdown_CALLBACK Callback);
void pd_driver_shutdown_Stub(CMOCK_pd_driver_shutdown_CALLBACK Callback);
#define pd_driver_shutdown_StubWithCallback pd_driver_shutdown_Stub
#define pd_driver_shutdown_IgnoreArg_dev_id() pd_driver_shutdown_CMockIgnoreArg_dev_id(__LINE__)
void pd_driver_shutdown_CMockIgnoreArg_dev_id(UNITY_LINE_TYPE cmock_line);
#define pd_driver_shutdown_IgnoreArg_system_shutdown() pd_driver_shutdown_CMockIgnoreArg_system_shutdown(__LINE__)
void pd_driver_shutdown_CMockIgnoreArg_system_shutdown(UNITY_LINE_TYPE cmock_line);
#define is_valid_state_IgnoreAndReturn(cmock_retval) is_valid_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_valid_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_valid_state_StopIgnore() is_valid_state_CMockStopIgnore()
void is_valid_state_CMockStopIgnore(void);
#define is_valid_state_ExpectAnyArgsAndReturn(cmock_retval) is_valid_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_valid_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_valid_state_ExpectAndReturn(pd, state, cmock_retval) is_valid_state_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void is_valid_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, unsigned int state, bool cmock_to_return);
typedef bool (* CMOCK_is_valid_state_CALLBACK)(const struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void is_valid_state_AddCallback(CMOCK_is_valid_state_CALLBACK Callback);
void is_valid_state_Stub(CMOCK_is_valid_state_CALLBACK Callback);
#define is_valid_state_StubWithCallback is_valid_state_Stub
#define is_valid_state_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) is_valid_state_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void is_valid_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, int pd_Depth, unsigned int state, bool cmock_to_return);
#define is_valid_state_IgnoreArg_pd() is_valid_state_CMockIgnoreArg_pd(__LINE__)
void is_valid_state_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define is_valid_state_IgnoreArg_state() is_valid_state_CMockIgnoreArg_state(__LINE__)
void is_valid_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define normalize_state_IgnoreAndReturn(cmock_retval) normalize_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void normalize_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define normalize_state_StopIgnore() normalize_state_CMockStopIgnore()
void normalize_state_CMockStopIgnore(void);
#define normalize_state_ExpectAnyArgsAndReturn(cmock_retval) normalize_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void normalize_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define normalize_state_ExpectAndReturn(state, cmock_retval) normalize_state_CMockExpectAndReturn(__LINE__, state, cmock_retval)
void normalize_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int state, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_normalize_state_CALLBACK)(unsigned int state, int cmock_num_calls);
void normalize_state_AddCallback(CMOCK_normalize_state_CALLBACK Callback);
void normalize_state_Stub(CMOCK_normalize_state_CALLBACK Callback);
#define normalize_state_StubWithCallback normalize_state_Stub
#define normalize_state_IgnoreArg_state() normalize_state_CMockIgnoreArg_state(__LINE__)
void normalize_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define is_deeper_state_IgnoreAndReturn(cmock_retval) is_deeper_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_deeper_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_deeper_state_StopIgnore() is_deeper_state_CMockStopIgnore()
void is_deeper_state_CMockStopIgnore(void);
#define is_deeper_state_ExpectAnyArgsAndReturn(cmock_retval) is_deeper_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_deeper_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_deeper_state_ExpectAndReturn(state, state_to_compare_to, cmock_retval) is_deeper_state_CMockExpectAndReturn(__LINE__, state, state_to_compare_to, cmock_retval)
void is_deeper_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int state, unsigned int state_to_compare_to, bool cmock_to_return);
typedef bool (* CMOCK_is_deeper_state_CALLBACK)(unsigned int state, unsigned int state_to_compare_to, int cmock_num_calls);
void is_deeper_state_AddCallback(CMOCK_is_deeper_state_CALLBACK Callback);
void is_deeper_state_Stub(CMOCK_is_deeper_state_CALLBACK Callback);
#define is_deeper_state_StubWithCallback is_deeper_state_Stub
#define is_deeper_state_IgnoreArg_state() is_deeper_state_CMockIgnoreArg_state(__LINE__)
void is_deeper_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define is_deeper_state_IgnoreArg_state_to_compare_to() is_deeper_state_CMockIgnoreArg_state_to_compare_to(__LINE__)
void is_deeper_state_CMockIgnoreArg_state_to_compare_to(UNITY_LINE_TYPE cmock_line);
#define is_shallower_state_IgnoreAndReturn(cmock_retval) is_shallower_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_shallower_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_shallower_state_StopIgnore() is_shallower_state_CMockStopIgnore()
void is_shallower_state_CMockStopIgnore(void);
#define is_shallower_state_ExpectAnyArgsAndReturn(cmock_retval) is_shallower_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_shallower_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_shallower_state_ExpectAndReturn(state, state_to_compare_to, cmock_retval) is_shallower_state_CMockExpectAndReturn(__LINE__, state, state_to_compare_to, cmock_retval)
void is_shallower_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int state, unsigned int state_to_compare_to, bool cmock_to_return);
typedef bool (* CMOCK_is_shallower_state_CALLBACK)(unsigned int state, unsigned int state_to_compare_to, int cmock_num_calls);
void is_shallower_state_AddCallback(CMOCK_is_shallower_state_CALLBACK Callback);
void is_shallower_state_Stub(CMOCK_is_shallower_state_CALLBACK Callback);
#define is_shallower_state_StubWithCallback is_shallower_state_Stub
#define is_shallower_state_IgnoreArg_state() is_shallower_state_CMockIgnoreArg_state(__LINE__)
void is_shallower_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define is_shallower_state_IgnoreArg_state_to_compare_to() is_shallower_state_CMockIgnoreArg_state_to_compare_to(__LINE__)
void is_shallower_state_CMockIgnoreArg_state_to_compare_to(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_child_IgnoreAndReturn(cmock_retval) is_allowed_by_child_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_allowed_by_child_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_child_StopIgnore() is_allowed_by_child_CMockStopIgnore()
void is_allowed_by_child_CMockStopIgnore(void);
#define is_allowed_by_child_ExpectAnyArgsAndReturn(cmock_retval) is_allowed_by_child_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_allowed_by_child_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_child_ExpectAndReturn(child, parent_state, child_state, cmock_retval) is_allowed_by_child_CMockExpectAndReturn(__LINE__, child, parent_state, child_state, cmock_retval)
void is_allowed_by_child_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* child, unsigned int parent_state, unsigned int child_state, bool cmock_to_return);
typedef bool (* CMOCK_is_allowed_by_child_CALLBACK)(const struct pd_ctx* child, unsigned int parent_state, unsigned int child_state, int cmock_num_calls);
void is_allowed_by_child_AddCallback(CMOCK_is_allowed_by_child_CALLBACK Callback);
void is_allowed_by_child_Stub(CMOCK_is_allowed_by_child_CALLBACK Callback);
#define is_allowed_by_child_StubWithCallback is_allowed_by_child_Stub
#define is_allowed_by_child_ExpectWithArrayAndReturn(child, child_Depth, parent_state, child_state, cmock_retval) is_allowed_by_child_CMockExpectWithArrayAndReturn(__LINE__, child, child_Depth, parent_state, child_state, cmock_retval)
void is_allowed_by_child_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* child, int child_Depth, unsigned int parent_state, unsigned int child_state, bool cmock_to_return);
#define is_allowed_by_child_IgnoreArg_child() is_allowed_by_child_CMockIgnoreArg_child(__LINE__)
void is_allowed_by_child_CMockIgnoreArg_child(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_child_IgnoreArg_parent_state() is_allowed_by_child_CMockIgnoreArg_parent_state(__LINE__)
void is_allowed_by_child_CMockIgnoreArg_parent_state(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_child_IgnoreArg_child_state() is_allowed_by_child_CMockIgnoreArg_child_state(__LINE__)
void is_allowed_by_child_CMockIgnoreArg_child_state(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_children_IgnoreAndReturn(cmock_retval) is_allowed_by_children_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_allowed_by_children_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_children_StopIgnore() is_allowed_by_children_CMockStopIgnore()
void is_allowed_by_children_CMockStopIgnore(void);
#define is_allowed_by_children_ExpectAnyArgsAndReturn(cmock_retval) is_allowed_by_children_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_allowed_by_children_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_children_ExpectAndReturn(pd, state, cmock_retval) is_allowed_by_children_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void is_allowed_by_children_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, unsigned int state, bool cmock_to_return);
typedef bool (* CMOCK_is_allowed_by_children_CALLBACK)(const struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void is_allowed_by_children_AddCallback(CMOCK_is_allowed_by_children_CALLBACK Callback);
void is_allowed_by_children_Stub(CMOCK_is_allowed_by_children_CALLBACK Callback);
#define is_allowed_by_children_StubWithCallback is_allowed_by_children_Stub
#define is_allowed_by_children_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) is_allowed_by_children_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void is_allowed_by_children_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, int pd_Depth, unsigned int state, bool cmock_to_return);
#define is_allowed_by_children_IgnoreArg_pd() is_allowed_by_children_CMockIgnoreArg_pd(__LINE__)
void is_allowed_by_children_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_children_IgnoreArg_state() is_allowed_by_children_CMockIgnoreArg_state(__LINE__)
void is_allowed_by_children_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define get_state_name_IgnoreAndReturn(cmock_retval) get_state_name_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_state_name_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define get_state_name_StopIgnore() get_state_name_CMockStopIgnore()
void get_state_name_CMockStopIgnore(void);
#define get_state_name_ExpectAnyArgsAndReturn(cmock_retval) get_state_name_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_state_name_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define get_state_name_ExpectAndReturn(pd, state, cmock_retval) get_state_name_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void get_state_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, unsigned int state, const char* cmock_to_return);
typedef const char* (* CMOCK_get_state_name_CALLBACK)(const struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void get_state_name_AddCallback(CMOCK_get_state_name_CALLBACK Callback);
void get_state_name_Stub(CMOCK_get_state_name_CALLBACK Callback);
#define get_state_name_StubWithCallback get_state_name_Stub
#define get_state_name_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) get_state_name_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void get_state_name_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, int pd_Depth, unsigned int state, const char* cmock_to_return);
#define get_state_name_IgnoreArg_pd() get_state_name_CMockIgnoreArg_pd(__LINE__)
void get_state_name_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define get_state_name_IgnoreArg_state() get_state_name_CMockIgnoreArg_state(__LINE__)
void get_state_name_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define number_of_bits_to_shift_IgnoreAndReturn(cmock_retval) number_of_bits_to_shift_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void number_of_bits_to_shift_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define number_of_bits_to_shift_StopIgnore() number_of_bits_to_shift_CMockStopIgnore()
void number_of_bits_to_shift_CMockStopIgnore(void);
#define number_of_bits_to_shift_ExpectAnyArgsAndReturn(cmock_retval) number_of_bits_to_shift_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void number_of_bits_to_shift_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define number_of_bits_to_shift_ExpectAndReturn(mask, cmock_retval) number_of_bits_to_shift_CMockExpectAndReturn(__LINE__, mask, cmock_retval)
void number_of_bits_to_shift_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t mask, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_number_of_bits_to_shift_CALLBACK)(uint32_t mask, int cmock_num_calls);
void number_of_bits_to_shift_AddCallback(CMOCK_number_of_bits_to_shift_CALLBACK Callback);
void number_of_bits_to_shift_Stub(CMOCK_number_of_bits_to_shift_CALLBACK Callback);
#define number_of_bits_to_shift_StubWithCallback number_of_bits_to_shift_Stub
#define number_of_bits_to_shift_IgnoreArg_mask() number_of_bits_to_shift_CMockIgnoreArg_mask(__LINE__)
void number_of_bits_to_shift_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define retrieve_mapped_state_IgnoreAndReturn(cmock_retval) retrieve_mapped_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void retrieve_mapped_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define retrieve_mapped_state_StopIgnore() retrieve_mapped_state_CMockStopIgnore()
void retrieve_mapped_state_CMockStopIgnore(void);
#define retrieve_mapped_state_ExpectAnyArgsAndReturn(cmock_retval) retrieve_mapped_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void retrieve_mapped_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define retrieve_mapped_state_ExpectAndReturn(pd, state, cmock_retval) retrieve_mapped_state_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void retrieve_mapped_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, unsigned int state, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_retrieve_mapped_state_CALLBACK)(struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void retrieve_mapped_state_AddCallback(CMOCK_retrieve_mapped_state_CALLBACK Callback);
void retrieve_mapped_state_Stub(CMOCK_retrieve_mapped_state_CALLBACK Callback);
#define retrieve_mapped_state_StubWithCallback retrieve_mapped_state_Stub
#define retrieve_mapped_state_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) retrieve_mapped_state_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void retrieve_mapped_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, int pd_Depth, unsigned int state, unsigned int cmock_to_return);
#define retrieve_mapped_state_ReturnThruPtr_pd(pd) retrieve_mapped_state_CMockReturnMemThruPtr_pd(__LINE__, pd, sizeof(struct pd_ctx))
#define retrieve_mapped_state_ReturnArrayThruPtr_pd(pd, cmock_len) retrieve_mapped_state_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_len * sizeof(*pd))
#define retrieve_mapped_state_ReturnMemThruPtr_pd(pd, cmock_size) retrieve_mapped_state_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_size)
void retrieve_mapped_state_CMockReturnMemThruPtr_pd(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, size_t cmock_size);
#define retrieve_mapped_state_IgnoreArg_pd() retrieve_mapped_state_CMockIgnoreArg_pd(__LINE__)
void retrieve_mapped_state_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define retrieve_mapped_state_IgnoreArg_state() retrieve_mapped_state_CMockIgnoreArg_state(__LINE__)
void retrieve_mapped_state_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define get_level_state_from_composite_state_IgnoreAndReturn(cmock_retval) get_level_state_from_composite_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_level_state_from_composite_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define get_level_state_from_composite_state_StopIgnore() get_level_state_from_composite_state_CMockStopIgnore()
void get_level_state_from_composite_state_CMockStopIgnore(void);
#define get_level_state_from_composite_state_ExpectAnyArgsAndReturn(cmock_retval) get_level_state_from_composite_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_level_state_from_composite_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define get_level_state_from_composite_state_ExpectAndReturn(table, composite_state, level, cmock_retval) get_level_state_from_composite_state_CMockExpectAndReturn(__LINE__, table, composite_state, level, cmock_retval)
void get_level_state_from_composite_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint32_t* table, uint32_t composite_state, int level, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_get_level_state_from_composite_state_CALLBACK)(const uint32_t* table, uint32_t composite_state, int level, int cmock_num_calls);
void get_level_state_from_composite_state_AddCallback(CMOCK_get_level_state_from_composite_state_CALLBACK Callback);
void get_level_state_from_composite_state_Stub(CMOCK_get_level_state_from_composite_state_CALLBACK Callback);
#define get_level_state_from_composite_state_StubWithCallback get_level_state_from_composite_state_Stub
#define get_level_state_from_composite_state_ExpectWithArrayAndReturn(table, table_Depth, composite_state, level, cmock_retval) get_level_state_from_composite_state_CMockExpectWithArrayAndReturn(__LINE__, table, table_Depth, composite_state, level, cmock_retval)
void get_level_state_from_composite_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint32_t* table, int table_Depth, uint32_t composite_state, int level, unsigned int cmock_to_return);
#define get_level_state_from_composite_state_IgnoreArg_table() get_level_state_from_composite_state_CMockIgnoreArg_table(__LINE__)
void get_level_state_from_composite_state_CMockIgnoreArg_table(UNITY_LINE_TYPE cmock_line);
#define get_level_state_from_composite_state_IgnoreArg_composite_state() get_level_state_from_composite_state_CMockIgnoreArg_composite_state(__LINE__)
void get_level_state_from_composite_state_CMockIgnoreArg_composite_state(UNITY_LINE_TYPE cmock_line);
#define get_level_state_from_composite_state_IgnoreArg_level() get_level_state_from_composite_state_CMockIgnoreArg_level(__LINE__)
void get_level_state_from_composite_state_CMockIgnoreArg_level(UNITY_LINE_TYPE cmock_line);
#define get_highest_level_from_composite_state_IgnoreAndReturn(cmock_retval) get_highest_level_from_composite_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_highest_level_from_composite_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define get_highest_level_from_composite_state_StopIgnore() get_highest_level_from_composite_state_CMockStopIgnore()
void get_highest_level_from_composite_state_CMockStopIgnore(void);
#define get_highest_level_from_composite_state_ExpectAnyArgsAndReturn(cmock_retval) get_highest_level_from_composite_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_highest_level_from_composite_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define get_highest_level_from_composite_state_ExpectAndReturn(pd, composite_state, cmock_retval) get_highest_level_from_composite_state_CMockExpectAndReturn(__LINE__, pd, composite_state, cmock_retval)
void get_highest_level_from_composite_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, uint32_t composite_state, int cmock_to_return);
typedef int (* CMOCK_get_highest_level_from_composite_state_CALLBACK)(const struct pd_ctx* pd, uint32_t composite_state, int cmock_num_calls);
void get_highest_level_from_composite_state_AddCallback(CMOCK_get_highest_level_from_composite_state_CALLBACK Callback);
void get_highest_level_from_composite_state_Stub(CMOCK_get_highest_level_from_composite_state_CALLBACK Callback);
#define get_highest_level_from_composite_state_StubWithCallback get_highest_level_from_composite_state_Stub
#define get_highest_level_from_composite_state_ExpectWithArrayAndReturn(pd, pd_Depth, composite_state, cmock_retval) get_highest_level_from_composite_state_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, composite_state, cmock_retval)
void get_highest_level_from_composite_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* pd, int pd_Depth, uint32_t composite_state, int cmock_to_return);
#define get_highest_level_from_composite_state_IgnoreArg_pd() get_highest_level_from_composite_state_CMockIgnoreArg_pd(__LINE__)
void get_highest_level_from_composite_state_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define get_highest_level_from_composite_state_IgnoreArg_composite_state() get_highest_level_from_composite_state_CMockIgnoreArg_composite_state(__LINE__)
void get_highest_level_from_composite_state_CMockIgnoreArg_composite_state(UNITY_LINE_TYPE cmock_line);
#define is_valid_composite_state_IgnoreAndReturn(cmock_retval) is_valid_composite_state_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_valid_composite_state_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_valid_composite_state_StopIgnore() is_valid_composite_state_CMockStopIgnore()
void is_valid_composite_state_CMockStopIgnore(void);
#define is_valid_composite_state_ExpectAnyArgsAndReturn(cmock_retval) is_valid_composite_state_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_valid_composite_state_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_valid_composite_state_ExpectAndReturn(target_pd, composite_state, cmock_retval) is_valid_composite_state_CMockExpectAndReturn(__LINE__, target_pd, composite_state, cmock_retval)
void is_valid_composite_state_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* target_pd, uint32_t composite_state, bool cmock_to_return);
typedef bool (* CMOCK_is_valid_composite_state_CALLBACK)(struct pd_ctx* target_pd, uint32_t composite_state, int cmock_num_calls);
void is_valid_composite_state_AddCallback(CMOCK_is_valid_composite_state_CALLBACK Callback);
void is_valid_composite_state_Stub(CMOCK_is_valid_composite_state_CALLBACK Callback);
#define is_valid_composite_state_StubWithCallback is_valid_composite_state_Stub
#define is_valid_composite_state_ExpectWithArrayAndReturn(target_pd, target_pd_Depth, composite_state, cmock_retval) is_valid_composite_state_CMockExpectWithArrayAndReturn(__LINE__, target_pd, target_pd_Depth, composite_state, cmock_retval)
void is_valid_composite_state_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* target_pd, int target_pd_Depth, uint32_t composite_state, bool cmock_to_return);
#define is_valid_composite_state_ReturnThruPtr_target_pd(target_pd) is_valid_composite_state_CMockReturnMemThruPtr_target_pd(__LINE__, target_pd, sizeof(struct pd_ctx))
#define is_valid_composite_state_ReturnArrayThruPtr_target_pd(target_pd, cmock_len) is_valid_composite_state_CMockReturnMemThruPtr_target_pd(__LINE__, target_pd, cmock_len * sizeof(*target_pd))
#define is_valid_composite_state_ReturnMemThruPtr_target_pd(target_pd, cmock_size) is_valid_composite_state_CMockReturnMemThruPtr_target_pd(__LINE__, target_pd, cmock_size)
void is_valid_composite_state_CMockReturnMemThruPtr_target_pd(UNITY_LINE_TYPE cmock_line, struct pd_ctx* target_pd, size_t cmock_size);
#define is_valid_composite_state_IgnoreArg_target_pd() is_valid_composite_state_CMockIgnoreArg_target_pd(__LINE__)
void is_valid_composite_state_CMockIgnoreArg_target_pd(UNITY_LINE_TYPE cmock_line);
#define is_valid_composite_state_IgnoreArg_composite_state() is_valid_composite_state_CMockIgnoreArg_composite_state(__LINE__)
void is_valid_composite_state_CMockIgnoreArg_composite_state(UNITY_LINE_TYPE cmock_line);
#define is_upwards_transition_propagation_IgnoreAndReturn(cmock_retval) is_upwards_transition_propagation_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_upwards_transition_propagation_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_upwards_transition_propagation_StopIgnore() is_upwards_transition_propagation_CMockStopIgnore()
void is_upwards_transition_propagation_CMockStopIgnore(void);
#define is_upwards_transition_propagation_ExpectAnyArgsAndReturn(cmock_retval) is_upwards_transition_propagation_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_upwards_transition_propagation_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_upwards_transition_propagation_ExpectAndReturn(lowest_pd, composite_state, cmock_retval) is_upwards_transition_propagation_CMockExpectAndReturn(__LINE__, lowest_pd, composite_state, cmock_retval)
void is_upwards_transition_propagation_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* lowest_pd, uint32_t composite_state, bool cmock_to_return);
typedef bool (* CMOCK_is_upwards_transition_propagation_CALLBACK)(const struct pd_ctx* lowest_pd, uint32_t composite_state, int cmock_num_calls);
void is_upwards_transition_propagation_AddCallback(CMOCK_is_upwards_transition_propagation_CALLBACK Callback);
void is_upwards_transition_propagation_Stub(CMOCK_is_upwards_transition_propagation_CALLBACK Callback);
#define is_upwards_transition_propagation_StubWithCallback is_upwards_transition_propagation_Stub
#define is_upwards_transition_propagation_ExpectWithArrayAndReturn(lowest_pd, lowest_pd_Depth, composite_state, cmock_retval) is_upwards_transition_propagation_CMockExpectWithArrayAndReturn(__LINE__, lowest_pd, lowest_pd_Depth, composite_state, cmock_retval)
void is_upwards_transition_propagation_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct pd_ctx* lowest_pd, int lowest_pd_Depth, uint32_t composite_state, bool cmock_to_return);
#define is_upwards_transition_propagation_IgnoreArg_lowest_pd() is_upwards_transition_propagation_CMockIgnoreArg_lowest_pd(__LINE__)
void is_upwards_transition_propagation_CMockIgnoreArg_lowest_pd(UNITY_LINE_TYPE cmock_line);
#define is_upwards_transition_propagation_IgnoreArg_composite_state() is_upwards_transition_propagation_CMockIgnoreArg_composite_state(__LINE__)
void is_upwards_transition_propagation_CMockIgnoreArg_composite_state(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_parent_and_children_IgnoreAndReturn(cmock_retval) is_allowed_by_parent_and_children_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_allowed_by_parent_and_children_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_parent_and_children_StopIgnore() is_allowed_by_parent_and_children_CMockStopIgnore()
void is_allowed_by_parent_and_children_CMockStopIgnore(void);
#define is_allowed_by_parent_and_children_ExpectAnyArgsAndReturn(cmock_retval) is_allowed_by_parent_and_children_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_allowed_by_parent_and_children_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_allowed_by_parent_and_children_ExpectAndReturn(pd, state, cmock_retval) is_allowed_by_parent_and_children_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void is_allowed_by_parent_and_children_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, unsigned int state, bool cmock_to_return);
typedef bool (* CMOCK_is_allowed_by_parent_and_children_CALLBACK)(struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void is_allowed_by_parent_and_children_AddCallback(CMOCK_is_allowed_by_parent_and_children_CALLBACK Callback);
void is_allowed_by_parent_and_children_Stub(CMOCK_is_allowed_by_parent_and_children_CALLBACK Callback);
#define is_allowed_by_parent_and_children_StubWithCallback is_allowed_by_parent_and_children_Stub
#define is_allowed_by_parent_and_children_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) is_allowed_by_parent_and_children_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void is_allowed_by_parent_and_children_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, int pd_Depth, unsigned int state, bool cmock_to_return);
#define is_allowed_by_parent_and_children_ReturnThruPtr_pd(pd) is_allowed_by_parent_and_children_CMockReturnMemThruPtr_pd(__LINE__, pd, sizeof(struct pd_ctx))
#define is_allowed_by_parent_and_children_ReturnArrayThruPtr_pd(pd, cmock_len) is_allowed_by_parent_and_children_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_len * sizeof(*pd))
#define is_allowed_by_parent_and_children_ReturnMemThruPtr_pd(pd, cmock_size) is_allowed_by_parent_and_children_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_size)
void is_allowed_by_parent_and_children_CMockReturnMemThruPtr_pd(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, size_t cmock_size);
#define is_allowed_by_parent_and_children_IgnoreArg_pd() is_allowed_by_parent_and_children_CMockIgnoreArg_pd(__LINE__)
void is_allowed_by_parent_and_children_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define is_allowed_by_parent_and_children_IgnoreArg_state() is_allowed_by_parent_and_children_CMockIgnoreArg_state(__LINE__)
void is_allowed_by_parent_and_children_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define is_state_in_transition_IgnoreAndReturn(cmock_retval) is_state_in_transition_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_state_in_transition_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_state_in_transition_StopIgnore() is_state_in_transition_CMockStopIgnore()
void is_state_in_transition_CMockStopIgnore(void);
#define is_state_in_transition_ExpectAnyArgsAndReturn(cmock_retval) is_state_in_transition_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void is_state_in_transition_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define is_state_in_transition_ExpectAndReturn(pd, state, cmock_retval) is_state_in_transition_CMockExpectAndReturn(__LINE__, pd, state, cmock_retval)
void is_state_in_transition_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, unsigned int state, bool cmock_to_return);
typedef bool (* CMOCK_is_state_in_transition_CALLBACK)(struct pd_ctx* pd, unsigned int state, int cmock_num_calls);
void is_state_in_transition_AddCallback(CMOCK_is_state_in_transition_CALLBACK Callback);
void is_state_in_transition_Stub(CMOCK_is_state_in_transition_CALLBACK Callback);
#define is_state_in_transition_StubWithCallback is_state_in_transition_Stub
#define is_state_in_transition_ExpectWithArrayAndReturn(pd, pd_Depth, state, cmock_retval) is_state_in_transition_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, state, cmock_retval)
void is_state_in_transition_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, int pd_Depth, unsigned int state, bool cmock_to_return);
#define is_state_in_transition_ReturnThruPtr_pd(pd) is_state_in_transition_CMockReturnMemThruPtr_pd(__LINE__, pd, sizeof(struct pd_ctx))
#define is_state_in_transition_ReturnArrayThruPtr_pd(pd, cmock_len) is_state_in_transition_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_len * sizeof(*pd))
#define is_state_in_transition_ReturnMemThruPtr_pd(pd, cmock_size) is_state_in_transition_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_size)
void is_state_in_transition_CMockReturnMemThruPtr_pd(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, size_t cmock_size);
#define is_state_in_transition_IgnoreArg_pd() is_state_in_transition_CMockIgnoreArg_pd(__LINE__)
void is_state_in_transition_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define is_state_in_transition_IgnoreArg_state() is_state_in_transition_CMockIgnoreArg_state(__LINE__)
void is_state_in_transition_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define initiate_power_state_pre_transition_notification_IgnoreAndReturn(cmock_retval) initiate_power_state_pre_transition_notification_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void initiate_power_state_pre_transition_notification_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define initiate_power_state_pre_transition_notification_StopIgnore() initiate_power_state_pre_transition_notification_CMockStopIgnore()
void initiate_power_state_pre_transition_notification_CMockStopIgnore(void);
#define initiate_power_state_pre_transition_notification_ExpectAnyArgsAndReturn(cmock_retval) initiate_power_state_pre_transition_notification_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void initiate_power_state_pre_transition_notification_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define initiate_power_state_pre_transition_notification_ExpectAndReturn(pd, cmock_retval) initiate_power_state_pre_transition_notification_CMockExpectAndReturn(__LINE__, pd, cmock_retval)
void initiate_power_state_pre_transition_notification_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, bool cmock_to_return);
typedef bool (* CMOCK_initiate_power_state_pre_transition_notification_CALLBACK)(struct pd_ctx* pd, int cmock_num_calls);
void initiate_power_state_pre_transition_notification_AddCallback(CMOCK_initiate_power_state_pre_transition_notification_CALLBACK Callback);
void initiate_power_state_pre_transition_notification_Stub(CMOCK_initiate_power_state_pre_transition_notification_CALLBACK Callback);
#define initiate_power_state_pre_transition_notification_StubWithCallback initiate_power_state_pre_transition_notification_Stub
#define initiate_power_state_pre_transition_notification_ExpectWithArrayAndReturn(pd, pd_Depth, cmock_retval) initiate_power_state_pre_transition_notification_CMockExpectWithArrayAndReturn(__LINE__, pd, pd_Depth, cmock_retval)
void initiate_power_state_pre_transition_notification_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, int pd_Depth, bool cmock_to_return);
#define initiate_power_state_pre_transition_notification_ReturnThruPtr_pd(pd) initiate_power_state_pre_transition_notification_CMockReturnMemThruPtr_pd(__LINE__, pd, sizeof(struct pd_ctx))
#define initiate_power_state_pre_transition_notification_ReturnArrayThruPtr_pd(pd, cmock_len) initiate_power_state_pre_transition_notification_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_len * sizeof(*pd))
#define initiate_power_state_pre_transition_notification_ReturnMemThruPtr_pd(pd, cmock_size) initiate_power_state_pre_transition_notification_CMockReturnMemThruPtr_pd(__LINE__, pd, cmock_size)
void initiate_power_state_pre_transition_notification_CMockReturnMemThruPtr_pd(UNITY_LINE_TYPE cmock_line, struct pd_ctx* pd, size_t cmock_size);
#define initiate_power_state_pre_transition_notification_IgnoreArg_pd() initiate_power_state_pre_transition_notification_CMockIgnoreArg_pd(__LINE__)
void initiate_power_state_pre_transition_notification_CMockIgnoreArg_pd(UNITY_LINE_TYPE cmock_line);
#define notify_warm_reset_IgnoreAndReturn(cmock_retval) notify_warm_reset_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void notify_warm_reset_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define notify_warm_reset_StopIgnore() notify_warm_reset_CMockStopIgnore()
void notify_warm_reset_CMockStopIgnore(void);
#define notify_warm_reset_ExpectAndReturn(cmock_retval) notify_warm_reset_CMockExpectAndReturn(__LINE__, cmock_retval)
void notify_warm_reset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_notify_warm_reset_CALLBACK)(int cmock_num_calls);
void notify_warm_reset_AddCallback(CMOCK_notify_warm_reset_CALLBACK Callback);
void notify_warm_reset_Stub(CMOCK_notify_warm_reset_CALLBACK Callback);
#define notify_warm_reset_StubWithCallback notify_warm_reset_Stub
#define check_and_notify_system_shutdown_IgnoreAndReturn(cmock_retval) check_and_notify_system_shutdown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void check_and_notify_system_shutdown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define check_and_notify_system_shutdown_StopIgnore() check_and_notify_system_shutdown_CMockStopIgnore()
void check_and_notify_system_shutdown_CMockStopIgnore(void);
#define check_and_notify_system_shutdown_ExpectAnyArgsAndReturn(cmock_retval) check_and_notify_system_shutdown_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void check_and_notify_system_shutdown_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define check_and_notify_system_shutdown_ExpectAndReturn(system_shutdown, cmock_retval) check_and_notify_system_shutdown_CMockExpectAndReturn(__LINE__, system_shutdown, cmock_retval)
void check_and_notify_system_shutdown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, enum mod_pd_system_shutdown system_shutdown, bool cmock_to_return);
typedef bool (* CMOCK_check_and_notify_system_shutdown_CALLBACK)(enum mod_pd_system_shutdown system_shutdown, int cmock_num_calls);
void check_and_notify_system_shutdown_AddCallback(CMOCK_check_and_notify_system_shutdown_CALLBACK Callback);
void check_and_notify_system_shutdown_Stub(CMOCK_check_and_notify_system_shutdown_CALLBACK Callback);
#define check_and_notify_system_shutdown_StubWithCallback check_and_notify_system_shutdown_Stub
#define check_and_notify_system_shutdown_IgnoreArg_system_shutdown() check_and_notify_system_shutdown_CMockIgnoreArg_system_shutdown(__LINE__)
void check_and_notify_system_shutdown_CMockIgnoreArg_system_shutdown(UNITY_LINE_TYPE cmock_line);
#define pd_process_notification_IgnoreAndReturn(cmock_retval) pd_process_notification_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pd_process_notification_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_process_notification_StopIgnore() pd_process_notification_CMockStopIgnore()
void pd_process_notification_CMockStopIgnore(void);
#define pd_process_notification_ExpectAnyArgsAndReturn(cmock_retval) pd_process_notification_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pd_process_notification_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define pd_process_notification_ExpectAndReturn(event, resp, cmock_retval) pd_process_notification_CMockExpectAndReturn(__LINE__, event, resp, cmock_retval)
void pd_process_notification_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const struct fwk_event* event, struct fwk_event* resp, int cmock_to_return);
typedef int (* CMOCK_pd_process_notification_CALLBACK)(const struct fwk_event* event, struct fwk_event* resp, int cmock_num_calls);
void pd_process_notification_AddCallback(CMOCK_pd_process_notification_CALLBACK Callback);
void pd_process_notification_Stub(CMOCK_pd_process_notification_CALLBACK Callback);
#define pd_process_notification_StubWithCallback pd_process_notification_Stub
#define pd_process_notification_ExpectWithArrayAndReturn(event, event_Depth, resp, resp_Depth, cmock_retval) pd_process_notification_CMockExpectWithArrayAndReturn(__LINE__, event, event_Depth, resp, resp_Depth, cmock_retval)
void pd_process_notification_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const struct fwk_event* event, int event_Depth, struct fwk_event* resp, int resp_Depth, int cmock_to_return);
#define pd_process_notification_ReturnThruPtr_resp(resp) pd_process_notification_CMockReturnMemThruPtr_resp(__LINE__, resp, sizeof(struct fwk_event))
#define pd_process_notification_ReturnArrayThruPtr_resp(resp, cmock_len) pd_process_notification_CMockReturnMemThruPtr_resp(__LINE__, resp, cmock_len * sizeof(*resp))
#define pd_process_notification_ReturnMemThruPtr_resp(resp, cmock_size) pd_process_notification_CMockReturnMemThruPtr_resp(__LINE__, resp, cmock_size)
void pd_process_notification_CMockReturnMemThruPtr_resp(UNITY_LINE_TYPE cmock_line, struct fwk_event* resp, size_t cmock_size);
#define pd_process_notification_IgnoreArg_event() pd_process_notification_CMockIgnoreArg_event(__LINE__)
void pd_process_notification_CMockIgnoreArg_event(UNITY_LINE_TYPE cmock_line);
#define pd_process_notification_IgnoreArg_resp() pd_process_notification_CMockIgnoreArg_resp(__LINE__)
void pd_process_notification_CMockIgnoreArg_resp(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
