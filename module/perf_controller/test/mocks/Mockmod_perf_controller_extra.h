/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_PERF_CONTROLLER_EXTRA_H
#define _MOCKMOD_PERF_CONTROLLER_EXTRA_H

#include "unity.h"
#include "mod_perf_controller_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_perf_controller_extra_Init(void);
void Mockmod_perf_controller_extra_Destroy(void);
void Mockmod_perf_controller_extra_Verify(void);




#define get_cores_min_power_limit_stub_IgnoreAndReturn(cmock_retval) get_cores_min_power_limit_stub_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_cores_min_power_limit_stub_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define get_cores_min_power_limit_stub_StopIgnore() get_cores_min_power_limit_stub_CMockStopIgnore()
void get_cores_min_power_limit_stub_CMockStopIgnore(void);
#define get_cores_min_power_limit_stub_ExpectAnyArgsAndReturn(cmock_retval) get_cores_min_power_limit_stub_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void get_cores_min_power_limit_stub_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define get_cores_min_power_limit_stub_ExpectAndReturn(cluster_ctx, cmock_retval) get_cores_min_power_limit_stub_CMockExpectAndReturn(__LINE__, cluster_ctx, cmock_retval)
void get_cores_min_power_limit_stub_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_get_cores_min_power_limit_stub_CALLBACK)(struct mod_perf_controller_cluster_ctx* cluster_ctx, int cmock_num_calls);
void get_cores_min_power_limit_stub_AddCallback(CMOCK_get_cores_min_power_limit_stub_CALLBACK Callback);
void get_cores_min_power_limit_stub_Stub(CMOCK_get_cores_min_power_limit_stub_CALLBACK Callback);
#define get_cores_min_power_limit_stub_StubWithCallback get_cores_min_power_limit_stub_Stub
#define get_cores_min_power_limit_stub_ExpectWithArrayAndReturn(cluster_ctx, cluster_ctx_Depth, cmock_retval) get_cores_min_power_limit_stub_CMockExpectWithArrayAndReturn(__LINE__, cluster_ctx, cluster_ctx_Depth, cmock_retval)
void get_cores_min_power_limit_stub_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, int cluster_ctx_Depth, uint32_t cmock_to_return);
#define get_cores_min_power_limit_stub_ReturnThruPtr_cluster_ctx(cluster_ctx) get_cores_min_power_limit_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, sizeof(struct mod_perf_controller_cluster_ctx))
#define get_cores_min_power_limit_stub_ReturnArrayThruPtr_cluster_ctx(cluster_ctx, cmock_len) get_cores_min_power_limit_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, cmock_len * sizeof(*cluster_ctx))
#define get_cores_min_power_limit_stub_ReturnMemThruPtr_cluster_ctx(cluster_ctx, cmock_size) get_cores_min_power_limit_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, cmock_size)
void get_cores_min_power_limit_stub_CMockReturnMemThruPtr_cluster_ctx(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, size_t cmock_size);
#define get_cores_min_power_limit_stub_IgnoreArg_cluster_ctx() get_cores_min_power_limit_stub_CMockIgnoreArg_cluster_ctx(__LINE__)
void get_cores_min_power_limit_stub_CMockIgnoreArg_cluster_ctx(UNITY_LINE_TYPE cmock_line);
#define power_to_performance_IgnoreAndReturn(cmock_retval) power_to_performance_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void power_to_performance_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define power_to_performance_StopIgnore() power_to_performance_CMockStopIgnore()
void power_to_performance_CMockStopIgnore(void);
#define power_to_performance_ExpectAnyArgsAndReturn(cmock_retval) power_to_performance_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void power_to_performance_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define power_to_performance_ExpectAndReturn(model_id, power, performance_level, cmock_retval) power_to_performance_CMockExpectAndReturn(__LINE__, model_id, power, performance_level, cmock_retval)
void power_to_performance_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t model_id, uint32_t power, uint32_t* performance_level, int cmock_to_return);
typedef int (* CMOCK_power_to_performance_CALLBACK)(fwk_id_t model_id, uint32_t power, uint32_t* performance_level, int cmock_num_calls);
void power_to_performance_AddCallback(CMOCK_power_to_performance_CALLBACK Callback);
void power_to_performance_Stub(CMOCK_power_to_performance_CALLBACK Callback);
#define power_to_performance_StubWithCallback power_to_performance_Stub
#define power_to_performance_ExpectWithArrayAndReturn(model_id, power, performance_level, performance_level_Depth, cmock_retval) power_to_performance_CMockExpectWithArrayAndReturn(__LINE__, model_id, power, performance_level, performance_level_Depth, cmock_retval)
void power_to_performance_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t model_id, uint32_t power, uint32_t* performance_level, int performance_level_Depth, int cmock_to_return);
#define power_to_performance_ReturnThruPtr_performance_level(performance_level) power_to_performance_CMockReturnMemThruPtr_performance_level(__LINE__, performance_level, sizeof(uint32_t))
#define power_to_performance_ReturnArrayThruPtr_performance_level(performance_level, cmock_len) power_to_performance_CMockReturnMemThruPtr_performance_level(__LINE__, performance_level, cmock_len * sizeof(*performance_level))
#define power_to_performance_ReturnMemThruPtr_performance_level(performance_level, cmock_size) power_to_performance_CMockReturnMemThruPtr_performance_level(__LINE__, performance_level, cmock_size)
void power_to_performance_CMockReturnMemThruPtr_performance_level(UNITY_LINE_TYPE cmock_line, uint32_t* performance_level, size_t cmock_size);
#define power_to_performance_IgnoreArg_model_id() power_to_performance_CMockIgnoreArg_model_id(__LINE__)
void power_to_performance_CMockIgnoreArg_model_id(UNITY_LINE_TYPE cmock_line);
#define power_to_performance_IgnoreArg_power() power_to_performance_CMockIgnoreArg_power(__LINE__)
void power_to_performance_CMockIgnoreArg_power(UNITY_LINE_TYPE cmock_line);
#define power_to_performance_IgnoreArg_performance_level() power_to_performance_CMockIgnoreArg_performance_level(__LINE__)
void power_to_performance_CMockIgnoreArg_performance_level(UNITY_LINE_TYPE cmock_line);
#define driver_set_performance_level_IgnoreAndReturn(cmock_retval) driver_set_performance_level_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void driver_set_performance_level_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define driver_set_performance_level_StopIgnore() driver_set_performance_level_CMockStopIgnore()
void driver_set_performance_level_CMockStopIgnore(void);
#define driver_set_performance_level_ExpectAnyArgsAndReturn(cmock_retval) driver_set_performance_level_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void driver_set_performance_level_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define driver_set_performance_level_ExpectAndReturn(domain_id, cookie, performance_level, cmock_retval) driver_set_performance_level_CMockExpectAndReturn(__LINE__, domain_id, cookie, performance_level, cmock_retval)
void driver_set_performance_level_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t domain_id, uintptr_t cookie, uint32_t performance_level, int cmock_to_return);
typedef int (* CMOCK_driver_set_performance_level_CALLBACK)(fwk_id_t domain_id, uintptr_t cookie, uint32_t performance_level, int cmock_num_calls);
void driver_set_performance_level_AddCallback(CMOCK_driver_set_performance_level_CALLBACK Callback);
void driver_set_performance_level_Stub(CMOCK_driver_set_performance_level_CALLBACK Callback);
#define driver_set_performance_level_StubWithCallback driver_set_performance_level_Stub
#define driver_set_performance_level_IgnoreArg_domain_id() driver_set_performance_level_CMockIgnoreArg_domain_id(__LINE__)
void driver_set_performance_level_CMockIgnoreArg_domain_id(UNITY_LINE_TYPE cmock_line);
#define driver_set_performance_level_IgnoreArg_cookie() driver_set_performance_level_CMockIgnoreArg_cookie(__LINE__)
void driver_set_performance_level_CMockIgnoreArg_cookie(UNITY_LINE_TYPE cmock_line);
#define driver_set_performance_level_IgnoreArg_performance_level() driver_set_performance_level_CMockIgnoreArg_performance_level(__LINE__)
void driver_set_performance_level_CMockIgnoreArg_performance_level(UNITY_LINE_TYPE cmock_line);
#define cluster_apply_performance_granted_stub_IgnoreAndReturn(cmock_retval) cluster_apply_performance_granted_stub_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cluster_apply_performance_granted_stub_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cluster_apply_performance_granted_stub_StopIgnore() cluster_apply_performance_granted_stub_CMockStopIgnore()
void cluster_apply_performance_granted_stub_CMockStopIgnore(void);
#define cluster_apply_performance_granted_stub_ExpectAnyArgsAndReturn(cmock_retval) cluster_apply_performance_granted_stub_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void cluster_apply_performance_granted_stub_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cluster_apply_performance_granted_stub_ExpectAndReturn(cluster_ctx, cmock_retval) cluster_apply_performance_granted_stub_CMockExpectAndReturn(__LINE__, cluster_ctx, cmock_retval)
void cluster_apply_performance_granted_stub_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, int cmock_to_return);
typedef int (* CMOCK_cluster_apply_performance_granted_stub_CALLBACK)(struct mod_perf_controller_cluster_ctx* cluster_ctx, int cmock_num_calls);
void cluster_apply_performance_granted_stub_AddCallback(CMOCK_cluster_apply_performance_granted_stub_CALLBACK Callback);
void cluster_apply_performance_granted_stub_Stub(CMOCK_cluster_apply_performance_granted_stub_CALLBACK Callback);
#define cluster_apply_performance_granted_stub_StubWithCallback cluster_apply_performance_granted_stub_Stub
#define cluster_apply_performance_granted_stub_ExpectWithArrayAndReturn(cluster_ctx, cluster_ctx_Depth, cmock_retval) cluster_apply_performance_granted_stub_CMockExpectWithArrayAndReturn(__LINE__, cluster_ctx, cluster_ctx_Depth, cmock_retval)
void cluster_apply_performance_granted_stub_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, int cluster_ctx_Depth, int cmock_to_return);
#define cluster_apply_performance_granted_stub_ReturnThruPtr_cluster_ctx(cluster_ctx) cluster_apply_performance_granted_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, sizeof(struct mod_perf_controller_cluster_ctx))
#define cluster_apply_performance_granted_stub_ReturnArrayThruPtr_cluster_ctx(cluster_ctx, cmock_len) cluster_apply_performance_granted_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, cmock_len * sizeof(*cluster_ctx))
#define cluster_apply_performance_granted_stub_ReturnMemThruPtr_cluster_ctx(cluster_ctx, cmock_size) cluster_apply_performance_granted_stub_CMockReturnMemThruPtr_cluster_ctx(__LINE__, cluster_ctx, cmock_size)
void cluster_apply_performance_granted_stub_CMockReturnMemThruPtr_cluster_ctx(UNITY_LINE_TYPE cmock_line, struct mod_perf_controller_cluster_ctx* cluster_ctx, size_t cmock_size);
#define cluster_apply_performance_granted_stub_IgnoreArg_cluster_ctx() cluster_apply_performance_granted_stub_CMockIgnoreArg_cluster_ctx(__LINE__)
void cluster_apply_performance_granted_stub_CMockIgnoreArg_cluster_ctx(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
