/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMOD_THERMAL_MGMT_EXTRA_H
#define _MOCKMOD_THERMAL_MGMT_EXTRA_H

#include "unity.h"
#include "mod_thermal_mgmt_extra.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmod_thermal_mgmt_extra_Init(void);
void Mockmod_thermal_mgmt_extra_Destroy(void);
void Mockmod_thermal_mgmt_extra_Verify(void);




#define mod_thermal_mgmt_protection_api_warning_ExpectAnyArgs() mod_thermal_mgmt_protection_api_warning_CMockExpectAnyArgs(__LINE__)
void mod_thermal_mgmt_protection_api_warning_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define mod_thermal_mgmt_protection_api_warning_Expect(driver_id, thermal_id) mod_thermal_mgmt_protection_api_warning_CMockExpect(__LINE__, driver_id, thermal_id)
void mod_thermal_mgmt_protection_api_warning_CMockExpect(UNITY_LINE_TYPE cmock_line, fwk_id_t driver_id, fwk_id_t thermal_id);
typedef void (* CMOCK_mod_thermal_mgmt_protection_api_warning_CALLBACK)(fwk_id_t driver_id, fwk_id_t thermal_id, int cmock_num_calls);
void mod_thermal_mgmt_protection_api_warning_AddCallback(CMOCK_mod_thermal_mgmt_protection_api_warning_CALLBACK Callback);
void mod_thermal_mgmt_protection_api_warning_Stub(CMOCK_mod_thermal_mgmt_protection_api_warning_CALLBACK Callback);
#define mod_thermal_mgmt_protection_api_warning_StubWithCallback mod_thermal_mgmt_protection_api_warning_Stub
#define mod_thermal_mgmt_protection_api_critical_ExpectAnyArgs() mod_thermal_mgmt_protection_api_critical_CMockExpectAnyArgs(__LINE__)
void mod_thermal_mgmt_protection_api_critical_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define mod_thermal_mgmt_protection_api_critical_Expect(driver_id, thermal_id) mod_thermal_mgmt_protection_api_critical_CMockExpect(__LINE__, driver_id, thermal_id)
void mod_thermal_mgmt_protection_api_critical_CMockExpect(UNITY_LINE_TYPE cmock_line, fwk_id_t driver_id, fwk_id_t thermal_id);
typedef void (* CMOCK_mod_thermal_mgmt_protection_api_critical_CALLBACK)(fwk_id_t driver_id, fwk_id_t thermal_id, int cmock_num_calls);
void mod_thermal_mgmt_protection_api_critical_AddCallback(CMOCK_mod_thermal_mgmt_protection_api_critical_CALLBACK Callback);
void mod_thermal_mgmt_protection_api_critical_Stub(CMOCK_mod_thermal_mgmt_protection_api_critical_CALLBACK Callback);
#define mod_thermal_mgmt_protection_api_critical_StubWithCallback mod_thermal_mgmt_protection_api_critical_Stub
#define mod_sensor_get_data_ExpectAnyArgsAndReturn(cmock_retval) mod_sensor_get_data_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mod_sensor_get_data_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mod_sensor_get_data_ExpectAndReturn(id, data, cmock_retval) mod_sensor_get_data_CMockExpectAndReturn(__LINE__, id, data, cmock_retval)
void mod_sensor_get_data_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_data* data, int cmock_to_return);
typedef int (* CMOCK_mod_sensor_get_data_CALLBACK)(fwk_id_t id, struct mod_sensor_data* data, int cmock_num_calls);
void mod_sensor_get_data_AddCallback(CMOCK_mod_sensor_get_data_CALLBACK Callback);
void mod_sensor_get_data_Stub(CMOCK_mod_sensor_get_data_CALLBACK Callback);
#define mod_sensor_get_data_StubWithCallback mod_sensor_get_data_Stub
#define mod_sensor_get_data_ExpectWithArrayAndReturn(id, data, data_Depth, cmock_retval) mod_sensor_get_data_CMockExpectWithArrayAndReturn(__LINE__, id, data, data_Depth, cmock_retval)
void mod_sensor_get_data_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, fwk_id_t id, struct mod_sensor_data* data, int data_Depth, int cmock_to_return);
#define mod_sensor_get_data_ReturnThruPtr_data(data) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(struct mod_sensor_data))
#define mod_sensor_get_data_ReturnArrayThruPtr_data(data, cmock_len) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define mod_sensor_get_data_ReturnMemThruPtr_data(data, cmock_size) mod_sensor_get_data_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void mod_sensor_get_data_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, struct mod_sensor_data* data, size_t cmock_size);
#define distribute_power_ExpectAnyArgs() distribute_power_CMockExpectAnyArgs(__LINE__)
void distribute_power_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define distribute_power_Expect(id, perf_request, perf_limit) distribute_power_CMockExpect(__LINE__, id, perf_request, perf_limit)
void distribute_power_CMockExpect(UNITY_LINE_TYPE cmock_line, fwk_id_t id, uint32_t* perf_request, uint32_t* perf_limit);
typedef void (* CMOCK_distribute_power_CALLBACK)(fwk_id_t id, uint32_t* perf_request, uint32_t* perf_limit, int cmock_num_calls);
void distribute_power_AddCallback(CMOCK_distribute_power_CALLBACK Callback);
void distribute_power_Stub(CMOCK_distribute_power_CALLBACK Callback);
#define distribute_power_StubWithCallback distribute_power_Stub
#define distribute_power_ExpectWithArray(id, perf_request, perf_request_Depth, perf_limit, perf_limit_Depth) distribute_power_CMockExpectWithArray(__LINE__, id, perf_request, perf_request_Depth, perf_limit, perf_limit_Depth)
void distribute_power_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, fwk_id_t id, uint32_t* perf_request, int perf_request_Depth, uint32_t* perf_limit, int perf_limit_Depth);
#define distribute_power_ReturnThruPtr_perf_request(perf_request) distribute_power_CMockReturnMemThruPtr_perf_request(__LINE__, perf_request, sizeof(uint32_t))
#define distribute_power_ReturnArrayThruPtr_perf_request(perf_request, cmock_len) distribute_power_CMockReturnMemThruPtr_perf_request(__LINE__, perf_request, cmock_len * sizeof(*perf_request))
#define distribute_power_ReturnMemThruPtr_perf_request(perf_request, cmock_size) distribute_power_CMockReturnMemThruPtr_perf_request(__LINE__, perf_request, cmock_size)
void distribute_power_CMockReturnMemThruPtr_perf_request(UNITY_LINE_TYPE cmock_line, uint32_t* perf_request, size_t cmock_size);
#define distribute_power_ReturnThruPtr_perf_limit(perf_limit) distribute_power_CMockReturnMemThruPtr_perf_limit(__LINE__, perf_limit, sizeof(uint32_t))
#define distribute_power_ReturnArrayThruPtr_perf_limit(perf_limit, cmock_len) distribute_power_CMockReturnMemThruPtr_perf_limit(__LINE__, perf_limit, cmock_len * sizeof(*perf_limit))
#define distribute_power_ReturnMemThruPtr_perf_limit(perf_limit, cmock_size) distribute_power_CMockReturnMemThruPtr_perf_limit(__LINE__, perf_limit, cmock_size)
void distribute_power_CMockReturnMemThruPtr_perf_limit(UNITY_LINE_TYPE cmock_line, uint32_t* perf_limit, size_t cmock_size);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
