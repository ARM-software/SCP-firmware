/*
 * Arm SCP/MCP Software
 * Copyright (c) 2015-2020, Arm Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef FWK_INTERNAL_SINGLE_THREAD_H
#define FWK_INTERNAL_SINGLE_THREAD_H

#include <fwk_event.h>
#include <fwk_list.h>

#include <stdbool.h>

/*
 * Thread component context. Exposed for testing purposes only.
 */

struct __fwk_thread_ctx {
    /* Thread framework component initialization completed flag */
    bool initialized;

    /*
     * Counter used to generate event cookies.
     */
    uint32_t event_cookie_counter;

    /*
     * Queue of event structures that are free to be filled in and linked
     * to the event queue or the ISR event queue.
     */
    struct fwk_slist free_event_queue;

    /* Queue of events, generated by ISRs, that are awaiting processing */
    struct fwk_slist isr_event_queue;

    /* Queue of events that are awaiting processing */
    struct fwk_slist event_queue;

    /* The event currently being processed */
    struct fwk_event *current_event;

    /* Event being processed when put_event_and_wait was called */
    struct fwk_event *previous_event;

    /*
     * Flag indicating the thread is waiting for the completion of the
     * processing of an event (true) or not (false). The thread
     * enters this waiting state when calling the fwk_thread_put_and_wait()
     * framework API requesting that the execution does not resume at the
     * caller until this event processing is complete and the response
     * received. The thread leaves this waiting state when the processing
     * of the aforementioned event is completed. The execution of the
     * caller is then resumed immediately: no other event processing occurs
     * between the end of the event processing and the caller execution being
     * resumed.
     *
     * Note that nested put_event_and_wait calls are not supported.
     */
    bool waiting_event_processing_completion;

    /*
     * The cookie of the event we are waiting for
     */
    uint32_t cookie;
};

/*
 * \brief Get thread component context.
 *
 * \note Only for testing.
 */
struct __fwk_thread_ctx *__fwk_thread_get_ctx(void);

// Added OP-TEE
/*!
 * \brief Put an event in a module or element thread queue and wait for it to
 *      be processed.
 *
 * \details This framework API function can only be called from a module or
 *      element's thread. The calling thread is suspended until the event
 *      has been completely processed. As a consequence, this function cannot
 *      be called during the pre-runtime phases.
 *
 *      The identifier of the event's source is filled in by the framework
 *      with the identifier of the entity calling the function. Thus there is
 *      no need for the caller to fill this event's field in.
 *
 *      The event identifier and target identifier are validated and must
 *      belong to the same module.
 *
 *      Warning: As this API could have serious adverse effects on system
 *               performance and throughput, this API has been deprecated
 *               and should not be used in single-threaded mode.
 *
 * \param event Event to put into the queue for processing. Must not be \c NULL.
 * \param[out] resp_event The response event. Must not be \c NULL.
 *
 * \retval FWK_SUCCESS The event was successfully processed.
 * \retval FWK_E_STATE The execution is not started.
 * \retval FWK_E_PARAM One or more of the parameters were invalid.
 * \retval FWK_E_PARAM One or more fields in the \p event parameter were
 *      invalid.
 * \retval FWK_E_ACCESS The API is called from an ISR, called from the common
 *      thread, or the event targets the calling thread.
 */
int fwk_thread_put_event_and_wait(struct fwk_event *event,
    struct fwk_event *resp_event)
    __attribute__((deprecated));

#endif /* FWK_INTERNAL_SINGLE_THREAD_H */
